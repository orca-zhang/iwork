// Code generated by protoc-gen-go.
// source: TSCEArchives.proto
// DO NOT EDIT!

/*
Package TSCE is a generated protocol buffer package.

It is generated from these files:
	TSCEArchives.proto

It has these top-level messages:
	CFUUIDArchive
	CellReferenceArchive
	InternalCellReferenceArchive
	RangeReferenceArchive
	InternalRangeReferenceArchive
	ReferenceArchive
	EdgeArchive
	EdgesArchive
	CellRecordArchive
	CellDependenciesArchive
	VolatileDependenciesArchive
	RangeBackDependencyArchive
	RTreeInternalNodeContentsArchive
	RTreeLeafNodeContentsArchive
	RTreeNodeArchive
	RTreeArchive
	RangeDependenciesArchive
	SpanningDependenciesArchive
	WholeOwnerDependenciesArchive
	FormulaOwnerInfoArchive
	OwnerIDMapArchive
	DependencyTrackerArchive
	NameTrackedReferencePair
	NamesByTrackedReferenceArchive
	NamedReferenceManagerArchive
	CalculationEngineArchive
	ASTNodeArrayArchive
	FormulaTranslationFlagsArchive
	FormulaArchive
	FormatStructArchive
	RangeCoordinateArchive
	TectonicShiftArchive
	RewriteSortMappingArchive
	RangeMovedInfoArchive
	TableResizedInfoArchive
	CellMergeInfoArchive
	FormulaRewriteSpecArchive
	CellCoordinateFormulaPairArchive
	CellCoordinateArchive
	CellCoordinateVectorArchive
	CellCoordinateObjectPairArchive
	CellCoordinateObjectMapArchive
	OwnerFormulaMapArchive
	FormulaRewriteCommandArchive
	NumberTrackedReferencePairArchive
	NumberToTrackedReferenceMapArchive
	TrackedReferencesRewriteCommandArchive
	TrackedReferenceArchive
	ReferenceTrackerArchive
	BooleanCellValueArchive
	DateCellValueArchive
	NumberCellValueArchive
	StringCellValueArchive
	CellValueArchive
*/
package TSCE

import proto "github.com/golang/protobuf/proto"
import math "math"
import "github.com/orcastor/iwork-converter/proto/TSP"
import "github.com/orcastor/iwork-converter/proto/TSK"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ReferenceArchive_ReferenceType int32

const (
	ReferenceArchive_CELL_REFERENCE  ReferenceArchive_ReferenceType = 1
	ReferenceArchive_RANGE_REFERENCE ReferenceArchive_ReferenceType = 2
	ReferenceArchive_NAME_DEPENDENCY ReferenceArchive_ReferenceType = 3
)

var ReferenceArchive_ReferenceType_name = map[int32]string{
	1: "CELL_REFERENCE",
	2: "RANGE_REFERENCE",
	3: "NAME_DEPENDENCY",
}
var ReferenceArchive_ReferenceType_value = map[string]int32{
	"CELL_REFERENCE":  1,
	"RANGE_REFERENCE": 2,
	"NAME_DEPENDENCY": 3,
}

func (x ReferenceArchive_ReferenceType) Enum() *ReferenceArchive_ReferenceType {
	p := new(ReferenceArchive_ReferenceType)
	*p = x
	return p
}
func (x ReferenceArchive_ReferenceType) String() string {
	return proto.EnumName(ReferenceArchive_ReferenceType_name, int32(x))
}
func (x *ReferenceArchive_ReferenceType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ReferenceArchive_ReferenceType_value, data, "ReferenceArchive_ReferenceType")
	if err != nil {
		return err
	}
	*x = ReferenceArchive_ReferenceType(value)
	return nil
}

type SpanningDependenciesArchive_RangeContext int32

const (
	SpanningDependenciesArchive_DEFAULT         SpanningDependenciesArchive_RangeContext = 0
	SpanningDependenciesArchive_INCLUDE_HEADERS SpanningDependenciesArchive_RangeContext = 1
)

var SpanningDependenciesArchive_RangeContext_name = map[int32]string{
	0: "DEFAULT",
	1: "INCLUDE_HEADERS",
}
var SpanningDependenciesArchive_RangeContext_value = map[string]int32{
	"DEFAULT":         0,
	"INCLUDE_HEADERS": 1,
}

func (x SpanningDependenciesArchive_RangeContext) Enum() *SpanningDependenciesArchive_RangeContext {
	p := new(SpanningDependenciesArchive_RangeContext)
	*p = x
	return p
}
func (x SpanningDependenciesArchive_RangeContext) String() string {
	return proto.EnumName(SpanningDependenciesArchive_RangeContext_name, int32(x))
}
func (x *SpanningDependenciesArchive_RangeContext) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SpanningDependenciesArchive_RangeContext_value, data, "SpanningDependenciesArchive_RangeContext")
	if err != nil {
		return err
	}
	*x = SpanningDependenciesArchive_RangeContext(value)
	return nil
}

type CalculationEngineArchive_ExcelImportDateMode int32

const (
	CalculationEngineArchive_DATE_MODE_1900        CalculationEngineArchive_ExcelImportDateMode = 1
	CalculationEngineArchive_DATE_MODE_1900_LEGACY CalculationEngineArchive_ExcelImportDateMode = 2
	CalculationEngineArchive_DATE_MODE_1904_LEGACY CalculationEngineArchive_ExcelImportDateMode = 3
)

var CalculationEngineArchive_ExcelImportDateMode_name = map[int32]string{
	1: "DATE_MODE_1900",
	2: "DATE_MODE_1900_LEGACY",
	3: "DATE_MODE_1904_LEGACY",
}
var CalculationEngineArchive_ExcelImportDateMode_value = map[string]int32{
	"DATE_MODE_1900":        1,
	"DATE_MODE_1900_LEGACY": 2,
	"DATE_MODE_1904_LEGACY": 3,
}

func (x CalculationEngineArchive_ExcelImportDateMode) Enum() *CalculationEngineArchive_ExcelImportDateMode {
	p := new(CalculationEngineArchive_ExcelImportDateMode)
	*p = x
	return p
}
func (x CalculationEngineArchive_ExcelImportDateMode) String() string {
	return proto.EnumName(CalculationEngineArchive_ExcelImportDateMode_name, int32(x))
}
func (x *CalculationEngineArchive_ExcelImportDateMode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CalculationEngineArchive_ExcelImportDateMode_value, data, "CalculationEngineArchive_ExcelImportDateMode")
	if err != nil {
		return err
	}
	*x = CalculationEngineArchive_ExcelImportDateMode(value)
	return nil
}

type ASTNodeArrayArchive_ASTNodeType int32

const (
	ASTNodeArrayArchive_ADDITION_NODE                   ASTNodeArrayArchive_ASTNodeType = 1
	ASTNodeArrayArchive_SUBTRACTION_NODE                ASTNodeArrayArchive_ASTNodeType = 2
	ASTNodeArrayArchive_MULTIPLICATION_NODE             ASTNodeArrayArchive_ASTNodeType = 3
	ASTNodeArrayArchive_DIVISION_NODE                   ASTNodeArrayArchive_ASTNodeType = 4
	ASTNodeArrayArchive_POWER_NODE                      ASTNodeArrayArchive_ASTNodeType = 5
	ASTNodeArrayArchive_CONCATENATION_NODE              ASTNodeArrayArchive_ASTNodeType = 6
	ASTNodeArrayArchive_GREATER_THAN_NODE               ASTNodeArrayArchive_ASTNodeType = 7
	ASTNodeArrayArchive_GREATER_THAN_OR_EQUAL_TO_NODE   ASTNodeArrayArchive_ASTNodeType = 8
	ASTNodeArrayArchive_LESS_THAN_NODE                  ASTNodeArrayArchive_ASTNodeType = 9
	ASTNodeArrayArchive_LESS_THAN_OR_EQUAL_TO_NODE      ASTNodeArrayArchive_ASTNodeType = 10
	ASTNodeArrayArchive_EQUAL_TO_NODE                   ASTNodeArrayArchive_ASTNodeType = 11
	ASTNodeArrayArchive_NOT_EQUAL_TO_NODE               ASTNodeArrayArchive_ASTNodeType = 12
	ASTNodeArrayArchive_NEGATION_NODE                   ASTNodeArrayArchive_ASTNodeType = 13
	ASTNodeArrayArchive_PLUS_SIGN_NODE                  ASTNodeArrayArchive_ASTNodeType = 14
	ASTNodeArrayArchive_PERCENT_NODE                    ASTNodeArrayArchive_ASTNodeType = 15
	ASTNodeArrayArchive_FUNCTION_NODE                   ASTNodeArrayArchive_ASTNodeType = 16
	ASTNodeArrayArchive_NUMBER_NODE                     ASTNodeArrayArchive_ASTNodeType = 17
	ASTNodeArrayArchive_BOOLEAN_NODE                    ASTNodeArrayArchive_ASTNodeType = 18
	ASTNodeArrayArchive_STRING_NODE                     ASTNodeArrayArchive_ASTNodeType = 19
	ASTNodeArrayArchive_DATE_NODE                       ASTNodeArrayArchive_ASTNodeType = 20
	ASTNodeArrayArchive_DURATION_NODE                   ASTNodeArrayArchive_ASTNodeType = 21
	ASTNodeArrayArchive_EMPTY_ARGUMENT_NODE             ASTNodeArrayArchive_ASTNodeType = 22
	ASTNodeArrayArchive_TOKEN_NODE                      ASTNodeArrayArchive_ASTNodeType = 23
	ASTNodeArrayArchive_ARRAY_NODE                      ASTNodeArrayArchive_ASTNodeType = 24
	ASTNodeArrayArchive_LIST_NODE                       ASTNodeArrayArchive_ASTNodeType = 25
	ASTNodeArrayArchive_THUNK_NODE                      ASTNodeArrayArchive_ASTNodeType = 26
	ASTNodeArrayArchive_LOCAL_CELL_REFERENCE_NODE       ASTNodeArrayArchive_ASTNodeType = 27
	ASTNodeArrayArchive_CROSS_TABLE_CELL_REFERENCE_NODE ASTNodeArrayArchive_ASTNodeType = 28
	ASTNodeArrayArchive_COLON_NODE                      ASTNodeArrayArchive_ASTNodeType = 29
	ASTNodeArrayArchive_REFERENCE_ERROR_NODE            ASTNodeArrayArchive_ASTNodeType = 30
	ASTNodeArrayArchive_UNKNOWN_FUNCTION_NODE           ASTNodeArrayArchive_ASTNodeType = 31
	ASTNodeArrayArchive_APPEND_WHITESPACE_NODE          ASTNodeArrayArchive_ASTNodeType = 32
	ASTNodeArrayArchive_PREPEND_WHITESPACE_NODE         ASTNodeArrayArchive_ASTNodeType = 33
	ASTNodeArrayArchive_BEGIN_THUNK_NODE                ASTNodeArrayArchive_ASTNodeType = 34
	ASTNodeArrayArchive_END_THUNK_NODE                  ASTNodeArrayArchive_ASTNodeType = 35
	ASTNodeArrayArchive_CELL_REFERENCE_NODE             ASTNodeArrayArchive_ASTNodeType = 36
)

var ASTNodeArrayArchive_ASTNodeType_name = map[int32]string{
	1:  "ADDITION_NODE",
	2:  "SUBTRACTION_NODE",
	3:  "MULTIPLICATION_NODE",
	4:  "DIVISION_NODE",
	5:  "POWER_NODE",
	6:  "CONCATENATION_NODE",
	7:  "GREATER_THAN_NODE",
	8:  "GREATER_THAN_OR_EQUAL_TO_NODE",
	9:  "LESS_THAN_NODE",
	10: "LESS_THAN_OR_EQUAL_TO_NODE",
	11: "EQUAL_TO_NODE",
	12: "NOT_EQUAL_TO_NODE",
	13: "NEGATION_NODE",
	14: "PLUS_SIGN_NODE",
	15: "PERCENT_NODE",
	16: "FUNCTION_NODE",
	17: "NUMBER_NODE",
	18: "BOOLEAN_NODE",
	19: "STRING_NODE",
	20: "DATE_NODE",
	21: "DURATION_NODE",
	22: "EMPTY_ARGUMENT_NODE",
	23: "TOKEN_NODE",
	24: "ARRAY_NODE",
	25: "LIST_NODE",
	26: "THUNK_NODE",
	27: "LOCAL_CELL_REFERENCE_NODE",
	28: "CROSS_TABLE_CELL_REFERENCE_NODE",
	29: "COLON_NODE",
	30: "REFERENCE_ERROR_NODE",
	31: "UNKNOWN_FUNCTION_NODE",
	32: "APPEND_WHITESPACE_NODE",
	33: "PREPEND_WHITESPACE_NODE",
	34: "BEGIN_THUNK_NODE",
	35: "END_THUNK_NODE",
	36: "CELL_REFERENCE_NODE",
}
var ASTNodeArrayArchive_ASTNodeType_value = map[string]int32{
	"ADDITION_NODE":                   1,
	"SUBTRACTION_NODE":                2,
	"MULTIPLICATION_NODE":             3,
	"DIVISION_NODE":                   4,
	"POWER_NODE":                      5,
	"CONCATENATION_NODE":              6,
	"GREATER_THAN_NODE":               7,
	"GREATER_THAN_OR_EQUAL_TO_NODE":   8,
	"LESS_THAN_NODE":                  9,
	"LESS_THAN_OR_EQUAL_TO_NODE":      10,
	"EQUAL_TO_NODE":                   11,
	"NOT_EQUAL_TO_NODE":               12,
	"NEGATION_NODE":                   13,
	"PLUS_SIGN_NODE":                  14,
	"PERCENT_NODE":                    15,
	"FUNCTION_NODE":                   16,
	"NUMBER_NODE":                     17,
	"BOOLEAN_NODE":                    18,
	"STRING_NODE":                     19,
	"DATE_NODE":                       20,
	"DURATION_NODE":                   21,
	"EMPTY_ARGUMENT_NODE":             22,
	"TOKEN_NODE":                      23,
	"ARRAY_NODE":                      24,
	"LIST_NODE":                       25,
	"THUNK_NODE":                      26,
	"LOCAL_CELL_REFERENCE_NODE":       27,
	"CROSS_TABLE_CELL_REFERENCE_NODE": 28,
	"COLON_NODE":                      29,
	"REFERENCE_ERROR_NODE":            30,
	"UNKNOWN_FUNCTION_NODE":           31,
	"APPEND_WHITESPACE_NODE":          32,
	"PREPEND_WHITESPACE_NODE":         33,
	"BEGIN_THUNK_NODE":                34,
	"END_THUNK_NODE":                  35,
	"CELL_REFERENCE_NODE":             36,
}

func (x ASTNodeArrayArchive_ASTNodeType) Enum() *ASTNodeArrayArchive_ASTNodeType {
	p := new(ASTNodeArrayArchive_ASTNodeType)
	*p = x
	return p
}
func (x ASTNodeArrayArchive_ASTNodeType) String() string {
	return proto.EnumName(ASTNodeArrayArchive_ASTNodeType_name, int32(x))
}
func (x *ASTNodeArrayArchive_ASTNodeType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ASTNodeArrayArchive_ASTNodeType_value, data, "ASTNodeArrayArchive_ASTNodeType")
	if err != nil {
		return err
	}
	*x = ASTNodeArrayArchive_ASTNodeType(value)
	return nil
}

type FormulaRewriteSpecArchive_RewriteType int32

const (
	FormulaRewriteSpecArchive_TECTONIC_SHIFT          FormulaRewriteSpecArchive_RewriteType = 1
	FormulaRewriteSpecArchive_REMAP_WITH_SORT_MAPPING FormulaRewriteSpecArchive_RewriteType = 2
	FormulaRewriteSpecArchive_MOVE_RANGE              FormulaRewriteSpecArchive_RewriteType = 3
	FormulaRewriteSpecArchive_DELETE_OWNER            FormulaRewriteSpecArchive_RewriteType = 4
	FormulaRewriteSpecArchive_TABLE_RESIZE            FormulaRewriteSpecArchive_RewriteType = 5
	FormulaRewriteSpecArchive_CELL_MERGE              FormulaRewriteSpecArchive_RewriteType = 6
)

var FormulaRewriteSpecArchive_RewriteType_name = map[int32]string{
	1: "TECTONIC_SHIFT",
	2: "REMAP_WITH_SORT_MAPPING",
	3: "MOVE_RANGE",
	4: "DELETE_OWNER",
	5: "TABLE_RESIZE",
	6: "CELL_MERGE",
}
var FormulaRewriteSpecArchive_RewriteType_value = map[string]int32{
	"TECTONIC_SHIFT":          1,
	"REMAP_WITH_SORT_MAPPING": 2,
	"MOVE_RANGE":              3,
	"DELETE_OWNER":            4,
	"TABLE_RESIZE":            5,
	"CELL_MERGE":              6,
}

func (x FormulaRewriteSpecArchive_RewriteType) Enum() *FormulaRewriteSpecArchive_RewriteType {
	p := new(FormulaRewriteSpecArchive_RewriteType)
	*p = x
	return p
}
func (x FormulaRewriteSpecArchive_RewriteType) String() string {
	return proto.EnumName(FormulaRewriteSpecArchive_RewriteType_name, int32(x))
}
func (x *FormulaRewriteSpecArchive_RewriteType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FormulaRewriteSpecArchive_RewriteType_value, data, "FormulaRewriteSpecArchive_RewriteType")
	if err != nil {
		return err
	}
	*x = FormulaRewriteSpecArchive_RewriteType(value)
	return nil
}

type CellValueArchive_CellValueType int32

const (
	CellValueArchive_NIL_TYPE     CellValueArchive_CellValueType = 1
	CellValueArchive_BOOLEAN_TYPE CellValueArchive_CellValueType = 2
	CellValueArchive_DATE_TYPE    CellValueArchive_CellValueType = 3
	CellValueArchive_NUMBER_TYPE  CellValueArchive_CellValueType = 4
	CellValueArchive_STRING_TYPE  CellValueArchive_CellValueType = 5
)

var CellValueArchive_CellValueType_name = map[int32]string{
	1: "NIL_TYPE",
	2: "BOOLEAN_TYPE",
	3: "DATE_TYPE",
	4: "NUMBER_TYPE",
	5: "STRING_TYPE",
}
var CellValueArchive_CellValueType_value = map[string]int32{
	"NIL_TYPE":     1,
	"BOOLEAN_TYPE": 2,
	"DATE_TYPE":    3,
	"NUMBER_TYPE":  4,
	"STRING_TYPE":  5,
}

func (x CellValueArchive_CellValueType) Enum() *CellValueArchive_CellValueType {
	p := new(CellValueArchive_CellValueType)
	*p = x
	return p
}
func (x CellValueArchive_CellValueType) String() string {
	return proto.EnumName(CellValueArchive_CellValueType_name, int32(x))
}
func (x *CellValueArchive_CellValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(CellValueArchive_CellValueType_value, data, "CellValueArchive_CellValueType")
	if err != nil {
		return err
	}
	*x = CellValueArchive_CellValueType(value)
	return nil
}

type CFUUIDArchive struct {
	UuidBytes        []byte  `protobuf:"bytes,1,opt,name=uuid_bytes" json:"uuid_bytes,omitempty"`
	UuidW0           *uint32 `protobuf:"varint,2,opt,name=uuid_w0" json:"uuid_w0,omitempty"`
	UuidW1           *uint32 `protobuf:"varint,3,opt,name=uuid_w1" json:"uuid_w1,omitempty"`
	UuidW2           *uint32 `protobuf:"varint,4,opt,name=uuid_w2" json:"uuid_w2,omitempty"`
	UuidW3           *uint32 `protobuf:"varint,5,opt,name=uuid_w3" json:"uuid_w3,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CFUUIDArchive) Reset()         { *m = CFUUIDArchive{} }
func (m *CFUUIDArchive) String() string { return proto.CompactTextString(m) }
func (*CFUUIDArchive) ProtoMessage()    {}

func (m *CFUUIDArchive) GetUuidBytes() []byte {
	if m != nil {
		return m.UuidBytes
	}
	return nil
}

func (m *CFUUIDArchive) GetUuidW0() uint32 {
	if m != nil && m.UuidW0 != nil {
		return *m.UuidW0
	}
	return 0
}

func (m *CFUUIDArchive) GetUuidW1() uint32 {
	if m != nil && m.UuidW1 != nil {
		return *m.UuidW1
	}
	return 0
}

func (m *CFUUIDArchive) GetUuidW2() uint32 {
	if m != nil && m.UuidW2 != nil {
		return *m.UuidW2
	}
	return 0
}

func (m *CFUUIDArchive) GetUuidW3() uint32 {
	if m != nil && m.UuidW3 != nil {
		return *m.UuidW3
	}
	return 0
}

type CellReferenceArchive struct {
	Column           *uint32        `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	Row              *uint32        `protobuf:"varint,2,req,name=row" json:"row,omitempty"`
	TableId          *CFUUIDArchive `protobuf:"bytes,3,req,name=table_id" json:"table_id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CellReferenceArchive) Reset()         { *m = CellReferenceArchive{} }
func (m *CellReferenceArchive) String() string { return proto.CompactTextString(m) }
func (*CellReferenceArchive) ProtoMessage()    {}

func (m *CellReferenceArchive) GetColumn() uint32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func (m *CellReferenceArchive) GetRow() uint32 {
	if m != nil && m.Row != nil {
		return *m.Row
	}
	return 0
}

func (m *CellReferenceArchive) GetTableId() *CFUUIDArchive {
	if m != nil {
		return m.TableId
	}
	return nil
}

type InternalCellReferenceArchive struct {
	Coordinate       *CellCoordinateArchive `protobuf:"bytes,1,req,name=coordinate" json:"coordinate,omitempty"`
	OwnerId          *uint32                `protobuf:"varint,2,req,name=owner_id" json:"owner_id,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *InternalCellReferenceArchive) Reset()         { *m = InternalCellReferenceArchive{} }
func (m *InternalCellReferenceArchive) String() string { return proto.CompactTextString(m) }
func (*InternalCellReferenceArchive) ProtoMessage()    {}

func (m *InternalCellReferenceArchive) GetCoordinate() *CellCoordinateArchive {
	if m != nil {
		return m.Coordinate
	}
	return nil
}

func (m *InternalCellReferenceArchive) GetOwnerId() uint32 {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return 0
}

type RangeReferenceArchive struct {
	TableId           *CFUUIDArchive `protobuf:"bytes,1,req,name=table_id" json:"table_id,omitempty"`
	TopLeftColumn     *uint32        `protobuf:"varint,2,req,name=top_left_column" json:"top_left_column,omitempty"`
	TopLeftRow        *uint32        `protobuf:"varint,3,req,name=top_left_row" json:"top_left_row,omitempty"`
	BottomRightColumn *uint32        `protobuf:"varint,4,req,name=bottom_right_column" json:"bottom_right_column,omitempty"`
	BottomRightRow    *uint32        `protobuf:"varint,5,req,name=bottom_right_row" json:"bottom_right_row,omitempty"`
	XXX_unrecognized  []byte         `json:"-"`
}

func (m *RangeReferenceArchive) Reset()         { *m = RangeReferenceArchive{} }
func (m *RangeReferenceArchive) String() string { return proto.CompactTextString(m) }
func (*RangeReferenceArchive) ProtoMessage()    {}

func (m *RangeReferenceArchive) GetTableId() *CFUUIDArchive {
	if m != nil {
		return m.TableId
	}
	return nil
}

func (m *RangeReferenceArchive) GetTopLeftColumn() uint32 {
	if m != nil && m.TopLeftColumn != nil {
		return *m.TopLeftColumn
	}
	return 0
}

func (m *RangeReferenceArchive) GetTopLeftRow() uint32 {
	if m != nil && m.TopLeftRow != nil {
		return *m.TopLeftRow
	}
	return 0
}

func (m *RangeReferenceArchive) GetBottomRightColumn() uint32 {
	if m != nil && m.BottomRightColumn != nil {
		return *m.BottomRightColumn
	}
	return 0
}

func (m *RangeReferenceArchive) GetBottomRightRow() uint32 {
	if m != nil && m.BottomRightRow != nil {
		return *m.BottomRightRow
	}
	return 0
}

type InternalRangeReferenceArchive struct {
	OwnerId          *uint32                 `protobuf:"varint,1,req,name=owner_id" json:"owner_id,omitempty"`
	Range            *RangeCoordinateArchive `protobuf:"bytes,2,req,name=range" json:"range,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *InternalRangeReferenceArchive) Reset()         { *m = InternalRangeReferenceArchive{} }
func (m *InternalRangeReferenceArchive) String() string { return proto.CompactTextString(m) }
func (*InternalRangeReferenceArchive) ProtoMessage()    {}

func (m *InternalRangeReferenceArchive) GetOwnerId() uint32 {
	if m != nil && m.OwnerId != nil {
		return *m.OwnerId
	}
	return 0
}

func (m *InternalRangeReferenceArchive) GetRange() *RangeCoordinateArchive {
	if m != nil {
		return m.Range
	}
	return nil
}

type ReferenceArchive struct {
	ReferenceType    *ReferenceArchive_ReferenceType `protobuf:"varint,1,req,name=reference_type,enum=TSCE.ReferenceArchive_ReferenceType" json:"reference_type,omitempty"`
	CellReference    *CellReferenceArchive           `protobuf:"bytes,2,opt,name=cell_reference" json:"cell_reference,omitempty"`
	RangeReference   *RangeReferenceArchive          `protobuf:"bytes,3,opt,name=range_reference" json:"range_reference,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *ReferenceArchive) Reset()         { *m = ReferenceArchive{} }
func (m *ReferenceArchive) String() string { return proto.CompactTextString(m) }
func (*ReferenceArchive) ProtoMessage()    {}

func (m *ReferenceArchive) GetReferenceType() ReferenceArchive_ReferenceType {
	if m != nil && m.ReferenceType != nil {
		return *m.ReferenceType
	}
	return ReferenceArchive_CELL_REFERENCE
}

func (m *ReferenceArchive) GetCellReference() *CellReferenceArchive {
	if m != nil {
		return m.CellReference
	}
	return nil
}

func (m *ReferenceArchive) GetRangeReference() *RangeReferenceArchive {
	if m != nil {
		return m.RangeReference
	}
	return nil
}

type EdgeArchive struct {
	Column           *uint32        `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	Row              *uint32        `protobuf:"varint,2,req,name=row" json:"row,omitempty"`
	IsPrecedent      *bool          `protobuf:"varint,3,req,name=is_precedent" json:"is_precedent,omitempty"`
	OwnerId          *CFUUIDArchive `protobuf:"bytes,4,opt,name=owner_id" json:"owner_id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *EdgeArchive) Reset()         { *m = EdgeArchive{} }
func (m *EdgeArchive) String() string { return proto.CompactTextString(m) }
func (*EdgeArchive) ProtoMessage()    {}

func (m *EdgeArchive) GetColumn() uint32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func (m *EdgeArchive) GetRow() uint32 {
	if m != nil && m.Row != nil {
		return *m.Row
	}
	return 0
}

func (m *EdgeArchive) GetIsPrecedent() bool {
	if m != nil && m.IsPrecedent != nil {
		return *m.IsPrecedent
	}
	return false
}

func (m *EdgeArchive) GetOwnerId() *CFUUIDArchive {
	if m != nil {
		return m.OwnerId
	}
	return nil
}

type EdgesArchive struct {
	PackedEdgeWithoutOwner []uint32         `protobuf:"varint,9,rep,name=packed_edge_without_owner" json:"packed_edge_without_owner,omitempty"`
	PackedEdgeWithOwner    []uint32         `protobuf:"varint,10,rep,name=packed_edge_with_owner" json:"packed_edge_with_owner,omitempty"`
	OwnerIdForEdge         []*CFUUIDArchive `protobuf:"bytes,11,rep,name=owner_id_for_edge" json:"owner_id_for_edge,omitempty"`
	InternalOwnerIdForEdge []uint32         `protobuf:"varint,12,rep,name=internal_owner_id_for_edge" json:"internal_owner_id_for_edge,omitempty"`
	XXX_unrecognized       []byte           `json:"-"`
}

func (m *EdgesArchive) Reset()         { *m = EdgesArchive{} }
func (m *EdgesArchive) String() string { return proto.CompactTextString(m) }
func (*EdgesArchive) ProtoMessage()    {}

func (m *EdgesArchive) GetPackedEdgeWithoutOwner() []uint32 {
	if m != nil {
		return m.PackedEdgeWithoutOwner
	}
	return nil
}

func (m *EdgesArchive) GetPackedEdgeWithOwner() []uint32 {
	if m != nil {
		return m.PackedEdgeWithOwner
	}
	return nil
}

func (m *EdgesArchive) GetOwnerIdForEdge() []*CFUUIDArchive {
	if m != nil {
		return m.OwnerIdForEdge
	}
	return nil
}

func (m *EdgesArchive) GetInternalOwnerIdForEdge() []uint32 {
	if m != nil {
		return m.InternalOwnerIdForEdge
	}
	return nil
}

type CellRecordArchive struct {
	Column                              *uint32        `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	Row                                 *uint32        `protobuf:"varint,2,req,name=row" json:"row,omitempty"`
	DirtySelfPlusPrecedentsCount        *uint32        `protobuf:"varint,3,opt,name=dirty_self_plus_precedents_count,def=0" json:"dirty_self_plus_precedents_count,omitempty"`
	IsInACycle                          *bool          `protobuf:"varint,4,opt,name=is_in_a_cycle,def=0" json:"is_in_a_cycle,omitempty"`
	Edge                                []*EdgeArchive `protobuf:"bytes,5,rep,name=edge" json:"edge,omitempty"`
	ContainsAFormula                    *bool          `protobuf:"varint,6,opt,name=contains_a_formula,def=1" json:"contains_a_formula,omitempty"`
	HasCalculatedPrecedents             *bool          `protobuf:"varint,7,opt,name=has_calculated_precedents,def=0" json:"has_calculated_precedents,omitempty"`
	CalculatePrecedentsOnNextRecalc     *bool          `protobuf:"varint,8,opt,name=calculate_precedents_on_next_recalc,def=0" json:"calculate_precedents_on_next_recalc,omitempty"`
	TranslateForExcelImportOnNextRecalc *bool          `protobuf:"varint,10,opt,name=translate_for_excel_import_on_next_recalc,def=0" json:"translate_for_excel_import_on_next_recalc,omitempty"`
	Edges                               *EdgesArchive  `protobuf:"bytes,9,opt,name=edges" json:"edges,omitempty"`
	XXX_unrecognized                    []byte         `json:"-"`
}

func (m *CellRecordArchive) Reset()         { *m = CellRecordArchive{} }
func (m *CellRecordArchive) String() string { return proto.CompactTextString(m) }
func (*CellRecordArchive) ProtoMessage()    {}

const Default_CellRecordArchive_DirtySelfPlusPrecedentsCount uint32 = 0
const Default_CellRecordArchive_IsInACycle bool = false
const Default_CellRecordArchive_ContainsAFormula bool = true
const Default_CellRecordArchive_HasCalculatedPrecedents bool = false
const Default_CellRecordArchive_CalculatePrecedentsOnNextRecalc bool = false
const Default_CellRecordArchive_TranslateForExcelImportOnNextRecalc bool = false

func (m *CellRecordArchive) GetColumn() uint32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func (m *CellRecordArchive) GetRow() uint32 {
	if m != nil && m.Row != nil {
		return *m.Row
	}
	return 0
}

func (m *CellRecordArchive) GetDirtySelfPlusPrecedentsCount() uint32 {
	if m != nil && m.DirtySelfPlusPrecedentsCount != nil {
		return *m.DirtySelfPlusPrecedentsCount
	}
	return Default_CellRecordArchive_DirtySelfPlusPrecedentsCount
}

func (m *CellRecordArchive) GetIsInACycle() bool {
	if m != nil && m.IsInACycle != nil {
		return *m.IsInACycle
	}
	return Default_CellRecordArchive_IsInACycle
}

func (m *CellRecordArchive) GetEdge() []*EdgeArchive {
	if m != nil {
		return m.Edge
	}
	return nil
}

func (m *CellRecordArchive) GetContainsAFormula() bool {
	if m != nil && m.ContainsAFormula != nil {
		return *m.ContainsAFormula
	}
	return Default_CellRecordArchive_ContainsAFormula
}

func (m *CellRecordArchive) GetHasCalculatedPrecedents() bool {
	if m != nil && m.HasCalculatedPrecedents != nil {
		return *m.HasCalculatedPrecedents
	}
	return Default_CellRecordArchive_HasCalculatedPrecedents
}

func (m *CellRecordArchive) GetCalculatePrecedentsOnNextRecalc() bool {
	if m != nil && m.CalculatePrecedentsOnNextRecalc != nil {
		return *m.CalculatePrecedentsOnNextRecalc
	}
	return Default_CellRecordArchive_CalculatePrecedentsOnNextRecalc
}

func (m *CellRecordArchive) GetTranslateForExcelImportOnNextRecalc() bool {
	if m != nil && m.TranslateForExcelImportOnNextRecalc != nil {
		return *m.TranslateForExcelImportOnNextRecalc
	}
	return Default_CellRecordArchive_TranslateForExcelImportOnNextRecalc
}

func (m *CellRecordArchive) GetEdges() *EdgesArchive {
	if m != nil {
		return m.Edges
	}
	return nil
}

type CellDependenciesArchive struct {
	CellRecord       []*CellRecordArchive `protobuf:"bytes,1,rep,name=cell_record" json:"cell_record,omitempty"`
	NumDirtyCells    *uint32              `protobuf:"varint,2,opt,name=num_dirty_cells" json:"num_dirty_cells,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CellDependenciesArchive) Reset()         { *m = CellDependenciesArchive{} }
func (m *CellDependenciesArchive) String() string { return proto.CompactTextString(m) }
func (*CellDependenciesArchive) ProtoMessage()    {}

func (m *CellDependenciesArchive) GetCellRecord() []*CellRecordArchive {
	if m != nil {
		return m.CellRecord
	}
	return nil
}

func (m *CellDependenciesArchive) GetNumDirtyCells() uint32 {
	if m != nil && m.NumDirtyCells != nil {
		return *m.NumDirtyCells
	}
	return 0
}

type VolatileDependenciesArchive struct {
	VolatileTimeCellColumn         []uint32                 `protobuf:"varint,1,rep,name=volatile_time_cell_column" json:"volatile_time_cell_column,omitempty"`
	VolatileTimeCellRow            []uint32                 `protobuf:"varint,2,rep,name=volatile_time_cell_row" json:"volatile_time_cell_row,omitempty"`
	VolatileRandomCellColumn       []uint32                 `protobuf:"varint,3,rep,name=volatile_random_cell_column" json:"volatile_random_cell_column,omitempty"`
	VolatileRandomCellRow          []uint32                 `protobuf:"varint,4,rep,name=volatile_random_cell_row" json:"volatile_random_cell_row,omitempty"`
	VolatileLocaleCellColumn       []uint32                 `protobuf:"varint,15,rep,name=volatile_locale_cell_column" json:"volatile_locale_cell_column,omitempty"`
	VolatileLocaleCellRow          []uint32                 `protobuf:"varint,16,rep,name=volatile_locale_cell_row" json:"volatile_locale_cell_row,omitempty"`
	VolatileLocationCellColumn     []uint32                 `protobuf:"varint,5,rep,name=volatile_location_cell_column" json:"volatile_location_cell_column,omitempty"`
	VolatileLocationCellRow        []uint32                 `protobuf:"varint,6,rep,name=volatile_location_cell_row" json:"volatile_location_cell_row,omitempty"`
	VolatileCompassCellColumn      []uint32                 `protobuf:"varint,7,rep,name=volatile_compass_cell_column" json:"volatile_compass_cell_column,omitempty"`
	VolatileCompassCellRow         []uint32                 `protobuf:"varint,8,rep,name=volatile_compass_cell_row" json:"volatile_compass_cell_row,omitempty"`
	CalculatedDependencyCellColumn []uint32                 `protobuf:"varint,9,rep,name=calculated_dependency_cell_column" json:"calculated_dependency_cell_column,omitempty"`
	CalculatedDependencyCellRow    []uint32                 `protobuf:"varint,10,rep,name=calculated_dependency_cell_row" json:"calculated_dependency_cell_row,omitempty"`
	VolatileGeometryCellReference  []*CellReferenceArchive  `protobuf:"bytes,13,rep,name=volatile_geometry_cell_reference" json:"volatile_geometry_cell_reference,omitempty"`
	VolatileGeometryCell           []*CellCoordinateArchive `protobuf:"bytes,11,rep,name=volatile_geometry_cell" json:"volatile_geometry_cell,omitempty"`
	XXX_unrecognized               []byte                   `json:"-"`
}

func (m *VolatileDependenciesArchive) Reset()         { *m = VolatileDependenciesArchive{} }
func (m *VolatileDependenciesArchive) String() string { return proto.CompactTextString(m) }
func (*VolatileDependenciesArchive) ProtoMessage()    {}

func (m *VolatileDependenciesArchive) GetVolatileTimeCellColumn() []uint32 {
	if m != nil {
		return m.VolatileTimeCellColumn
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileTimeCellRow() []uint32 {
	if m != nil {
		return m.VolatileTimeCellRow
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileRandomCellColumn() []uint32 {
	if m != nil {
		return m.VolatileRandomCellColumn
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileRandomCellRow() []uint32 {
	if m != nil {
		return m.VolatileRandomCellRow
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileLocaleCellColumn() []uint32 {
	if m != nil {
		return m.VolatileLocaleCellColumn
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileLocaleCellRow() []uint32 {
	if m != nil {
		return m.VolatileLocaleCellRow
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileLocationCellColumn() []uint32 {
	if m != nil {
		return m.VolatileLocationCellColumn
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileLocationCellRow() []uint32 {
	if m != nil {
		return m.VolatileLocationCellRow
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileCompassCellColumn() []uint32 {
	if m != nil {
		return m.VolatileCompassCellColumn
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileCompassCellRow() []uint32 {
	if m != nil {
		return m.VolatileCompassCellRow
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetCalculatedDependencyCellColumn() []uint32 {
	if m != nil {
		return m.CalculatedDependencyCellColumn
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetCalculatedDependencyCellRow() []uint32 {
	if m != nil {
		return m.CalculatedDependencyCellRow
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileGeometryCellReference() []*CellReferenceArchive {
	if m != nil {
		return m.VolatileGeometryCellReference
	}
	return nil
}

func (m *VolatileDependenciesArchive) GetVolatileGeometryCell() []*CellCoordinateArchive {
	if m != nil {
		return m.VolatileGeometryCell
	}
	return nil
}

type RangeBackDependencyArchive struct {
	CellCoordRow           *uint32                        `protobuf:"varint,1,req,name=cell_coord_row" json:"cell_coord_row,omitempty"`
	CellCoordColumn        *uint32                        `protobuf:"varint,2,req,name=cell_coord_column" json:"cell_coord_column,omitempty"`
	RangeReference         *RangeReferenceArchive         `protobuf:"bytes,3,opt,name=range_reference" json:"range_reference,omitempty"`
	InternalRangeReference *InternalRangeReferenceArchive `protobuf:"bytes,4,opt,name=internal_range_reference" json:"internal_range_reference,omitempty"`
	XXX_unrecognized       []byte                         `json:"-"`
}

func (m *RangeBackDependencyArchive) Reset()         { *m = RangeBackDependencyArchive{} }
func (m *RangeBackDependencyArchive) String() string { return proto.CompactTextString(m) }
func (*RangeBackDependencyArchive) ProtoMessage()    {}

func (m *RangeBackDependencyArchive) GetCellCoordRow() uint32 {
	if m != nil && m.CellCoordRow != nil {
		return *m.CellCoordRow
	}
	return 0
}

func (m *RangeBackDependencyArchive) GetCellCoordColumn() uint32 {
	if m != nil && m.CellCoordColumn != nil {
		return *m.CellCoordColumn
	}
	return 0
}

func (m *RangeBackDependencyArchive) GetRangeReference() *RangeReferenceArchive {
	if m != nil {
		return m.RangeReference
	}
	return nil
}

func (m *RangeBackDependencyArchive) GetInternalRangeReference() *InternalRangeReferenceArchive {
	if m != nil {
		return m.InternalRangeReference
	}
	return nil
}

type RTreeInternalNodeContentsArchive struct {
	Min              []uint32          `protobuf:"varint,1,rep,name=min" json:"min,omitempty"`
	Max              []uint32          `protobuf:"varint,2,rep,name=max" json:"max,omitempty"`
	Child            *RTreeNodeArchive `protobuf:"bytes,3,req,name=child" json:"child,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RTreeInternalNodeContentsArchive) Reset()         { *m = RTreeInternalNodeContentsArchive{} }
func (m *RTreeInternalNodeContentsArchive) String() string { return proto.CompactTextString(m) }
func (*RTreeInternalNodeContentsArchive) ProtoMessage()    {}

func (m *RTreeInternalNodeContentsArchive) GetMin() []uint32 {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *RTreeInternalNodeContentsArchive) GetMax() []uint32 {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *RTreeInternalNodeContentsArchive) GetChild() *RTreeNodeArchive {
	if m != nil {
		return m.Child
	}
	return nil
}

type RTreeLeafNodeContentsArchive struct {
	Min              []uint32              `protobuf:"varint,1,rep,name=min" json:"min,omitempty"`
	Max              []uint32              `protobuf:"varint,2,rep,name=max" json:"max,omitempty"`
	CellReference    *CellReferenceArchive `protobuf:"bytes,3,req,name=cell_reference" json:"cell_reference,omitempty"`
	XXX_unrecognized []byte                `json:"-"`
}

func (m *RTreeLeafNodeContentsArchive) Reset()         { *m = RTreeLeafNodeContentsArchive{} }
func (m *RTreeLeafNodeContentsArchive) String() string { return proto.CompactTextString(m) }
func (*RTreeLeafNodeContentsArchive) ProtoMessage()    {}

func (m *RTreeLeafNodeContentsArchive) GetMin() []uint32 {
	if m != nil {
		return m.Min
	}
	return nil
}

func (m *RTreeLeafNodeContentsArchive) GetMax() []uint32 {
	if m != nil {
		return m.Max
	}
	return nil
}

func (m *RTreeLeafNodeContentsArchive) GetCellReference() *CellReferenceArchive {
	if m != nil {
		return m.CellReference
	}
	return nil
}

type RTreeNodeArchive struct {
	Level                *uint32                             `protobuf:"varint,1,req,name=level" json:"level,omitempty"`
	Count                *uint32                             `protobuf:"varint,2,req,name=count" json:"count,omitempty"`
	InternalNodeContents []*RTreeInternalNodeContentsArchive `protobuf:"bytes,3,rep,name=internal_node_contents" json:"internal_node_contents,omitempty"`
	LeafNodeContents     []*RTreeLeafNodeContentsArchive     `protobuf:"bytes,4,rep,name=leaf_node_contents" json:"leaf_node_contents,omitempty"`
	XXX_unrecognized     []byte                              `json:"-"`
}

func (m *RTreeNodeArchive) Reset()         { *m = RTreeNodeArchive{} }
func (m *RTreeNodeArchive) String() string { return proto.CompactTextString(m) }
func (*RTreeNodeArchive) ProtoMessage()    {}

func (m *RTreeNodeArchive) GetLevel() uint32 {
	if m != nil && m.Level != nil {
		return *m.Level
	}
	return 0
}

func (m *RTreeNodeArchive) GetCount() uint32 {
	if m != nil && m.Count != nil {
		return *m.Count
	}
	return 0
}

func (m *RTreeNodeArchive) GetInternalNodeContents() []*RTreeInternalNodeContentsArchive {
	if m != nil {
		return m.InternalNodeContents
	}
	return nil
}

func (m *RTreeNodeArchive) GetLeafNodeContents() []*RTreeLeafNodeContentsArchive {
	if m != nil {
		return m.LeafNodeContents
	}
	return nil
}

type RTreeArchive struct {
	DataFileId       *uint32           `protobuf:"varint,1,req,name=data_file_id" json:"data_file_id,omitempty"`
	DataSize         *uint32           `protobuf:"varint,2,req,name=data_size" json:"data_size,omitempty"`
	DataNumDims      *uint32           `protobuf:"varint,3,req,name=data_num_dims" json:"data_num_dims,omitempty"`
	DataElemSize     *uint32           `protobuf:"varint,4,req,name=data_elem_size" json:"data_elem_size,omitempty"`
	DataElemRealSize *uint32           `protobuf:"varint,5,req,name=data_elem_real_size" json:"data_elem_real_size,omitempty"`
	DataMaxNodes     *uint32           `protobuf:"varint,6,req,name=data_max_nodes" json:"data_max_nodes,omitempty"`
	DataMinNodes     *uint32           `protobuf:"varint,7,req,name=data_min_nodes" json:"data_min_nodes,omitempty"`
	Root             *RTreeNodeArchive `protobuf:"bytes,8,req,name=root" json:"root,omitempty"`
	XXX_unrecognized []byte            `json:"-"`
}

func (m *RTreeArchive) Reset()         { *m = RTreeArchive{} }
func (m *RTreeArchive) String() string { return proto.CompactTextString(m) }
func (*RTreeArchive) ProtoMessage()    {}

func (m *RTreeArchive) GetDataFileId() uint32 {
	if m != nil && m.DataFileId != nil {
		return *m.DataFileId
	}
	return 0
}

func (m *RTreeArchive) GetDataSize() uint32 {
	if m != nil && m.DataSize != nil {
		return *m.DataSize
	}
	return 0
}

func (m *RTreeArchive) GetDataNumDims() uint32 {
	if m != nil && m.DataNumDims != nil {
		return *m.DataNumDims
	}
	return 0
}

func (m *RTreeArchive) GetDataElemSize() uint32 {
	if m != nil && m.DataElemSize != nil {
		return *m.DataElemSize
	}
	return 0
}

func (m *RTreeArchive) GetDataElemRealSize() uint32 {
	if m != nil && m.DataElemRealSize != nil {
		return *m.DataElemRealSize
	}
	return 0
}

func (m *RTreeArchive) GetDataMaxNodes() uint32 {
	if m != nil && m.DataMaxNodes != nil {
		return *m.DataMaxNodes
	}
	return 0
}

func (m *RTreeArchive) GetDataMinNodes() uint32 {
	if m != nil && m.DataMinNodes != nil {
		return *m.DataMinNodes
	}
	return 0
}

func (m *RTreeArchive) GetRoot() *RTreeNodeArchive {
	if m != nil {
		return m.Root
	}
	return nil
}

type RangeDependenciesArchive struct {
	RTree            *RTreeArchive                 `protobuf:"bytes,1,opt,name=r_tree" json:"r_tree,omitempty"`
	BackDependency   []*RangeBackDependencyArchive `protobuf:"bytes,2,rep,name=back_dependency" json:"back_dependency,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *RangeDependenciesArchive) Reset()         { *m = RangeDependenciesArchive{} }
func (m *RangeDependenciesArchive) String() string { return proto.CompactTextString(m) }
func (*RangeDependenciesArchive) ProtoMessage()    {}

func (m *RangeDependenciesArchive) GetRTree() *RTreeArchive {
	if m != nil {
		return m.RTree
	}
	return nil
}

func (m *RangeDependenciesArchive) GetBackDependency() []*RangeBackDependencyArchive {
	if m != nil {
		return m.BackDependency
	}
	return nil
}

type SpanningDependenciesArchive struct {
	Column                       []uint32                                                    `protobuf:"varint,1,rep,name=column" json:"column,omitempty"`
	RangeContext                 []SpanningDependenciesArchive_RangeContext                  `protobuf:"varint,2,rep,name=range_context,enum=TSCE.SpanningDependenciesArchive_RangeContext" json:"range_context,omitempty"`
	Cell                         []*CellReferenceArchive                                     `protobuf:"bytes,3,rep,name=cell" json:"cell,omitempty"`
	TotalRangeForDeletedTable    *RangeCoordinateArchive                                     `protobuf:"bytes,4,opt,name=total_range_for_deleted_table" json:"total_range_for_deleted_table,omitempty"`
	BodyRangeForDeletedTable     *RangeCoordinateArchive                                     `protobuf:"bytes,5,opt,name=body_range_for_deleted_table" json:"body_range_for_deleted_table,omitempty"`
	ReferringColumnToLocalCells  []*SpanningDependenciesArchive_ReferringColumnToLocalCells  `protobuf:"bytes,6,rep,name=referring_column_to_local_cells" json:"referring_column_to_local_cells,omitempty"`
	ReferringColumnToRemoteCells []*SpanningDependenciesArchive_ReferringColumnToRemoteCells `protobuf:"bytes,7,rep,name=referring_column_to_remote_cells" json:"referring_column_to_remote_cells,omitempty"`
	XXX_unrecognized             []byte                                                      `json:"-"`
}

func (m *SpanningDependenciesArchive) Reset()         { *m = SpanningDependenciesArchive{} }
func (m *SpanningDependenciesArchive) String() string { return proto.CompactTextString(m) }
func (*SpanningDependenciesArchive) ProtoMessage()    {}

func (m *SpanningDependenciesArchive) GetColumn() []uint32 {
	if m != nil {
		return m.Column
	}
	return nil
}

func (m *SpanningDependenciesArchive) GetRangeContext() []SpanningDependenciesArchive_RangeContext {
	if m != nil {
		return m.RangeContext
	}
	return nil
}

func (m *SpanningDependenciesArchive) GetCell() []*CellReferenceArchive {
	if m != nil {
		return m.Cell
	}
	return nil
}

func (m *SpanningDependenciesArchive) GetTotalRangeForDeletedTable() *RangeCoordinateArchive {
	if m != nil {
		return m.TotalRangeForDeletedTable
	}
	return nil
}

func (m *SpanningDependenciesArchive) GetBodyRangeForDeletedTable() *RangeCoordinateArchive {
	if m != nil {
		return m.BodyRangeForDeletedTable
	}
	return nil
}

func (m *SpanningDependenciesArchive) GetReferringColumnToLocalCells() []*SpanningDependenciesArchive_ReferringColumnToLocalCells {
	if m != nil {
		return m.ReferringColumnToLocalCells
	}
	return nil
}

func (m *SpanningDependenciesArchive) GetReferringColumnToRemoteCells() []*SpanningDependenciesArchive_ReferringColumnToRemoteCells {
	if m != nil {
		return m.ReferringColumnToRemoteCells
	}
	return nil
}

type SpanningDependenciesArchive_ReferringColumnToLocalCells struct {
	Column           *uint32                                   `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	RangeContext     *SpanningDependenciesArchive_RangeContext `protobuf:"varint,2,req,name=range_context,enum=TSCE.SpanningDependenciesArchive_RangeContext" json:"range_context,omitempty"`
	CellCoordinate   []*CellCoordinateArchive                  `protobuf:"bytes,3,rep,name=cell_coordinate" json:"cell_coordinate,omitempty"`
	XXX_unrecognized []byte                                    `json:"-"`
}

func (m *SpanningDependenciesArchive_ReferringColumnToLocalCells) Reset() {
	*m = SpanningDependenciesArchive_ReferringColumnToLocalCells{}
}
func (m *SpanningDependenciesArchive_ReferringColumnToLocalCells) String() string {
	return proto.CompactTextString(m)
}
func (*SpanningDependenciesArchive_ReferringColumnToLocalCells) ProtoMessage() {}

func (m *SpanningDependenciesArchive_ReferringColumnToLocalCells) GetColumn() uint32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func (m *SpanningDependenciesArchive_ReferringColumnToLocalCells) GetRangeContext() SpanningDependenciesArchive_RangeContext {
	if m != nil && m.RangeContext != nil {
		return *m.RangeContext
	}
	return SpanningDependenciesArchive_DEFAULT
}

func (m *SpanningDependenciesArchive_ReferringColumnToLocalCells) GetCellCoordinate() []*CellCoordinateArchive {
	if m != nil {
		return m.CellCoordinate
	}
	return nil
}

type SpanningDependenciesArchive_ReferringColumnToRemoteCells struct {
	Column                *uint32                                   `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	RangeContext          *SpanningDependenciesArchive_RangeContext `protobuf:"varint,2,req,name=range_context,enum=TSCE.SpanningDependenciesArchive_RangeContext" json:"range_context,omitempty"`
	InternalCellReference []*InternalCellReferenceArchive           `protobuf:"bytes,3,rep,name=internal_cell_reference" json:"internal_cell_reference,omitempty"`
	XXX_unrecognized      []byte                                    `json:"-"`
}

func (m *SpanningDependenciesArchive_ReferringColumnToRemoteCells) Reset() {
	*m = SpanningDependenciesArchive_ReferringColumnToRemoteCells{}
}
func (m *SpanningDependenciesArchive_ReferringColumnToRemoteCells) String() string {
	return proto.CompactTextString(m)
}
func (*SpanningDependenciesArchive_ReferringColumnToRemoteCells) ProtoMessage() {}

func (m *SpanningDependenciesArchive_ReferringColumnToRemoteCells) GetColumn() uint32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func (m *SpanningDependenciesArchive_ReferringColumnToRemoteCells) GetRangeContext() SpanningDependenciesArchive_RangeContext {
	if m != nil && m.RangeContext != nil {
		return *m.RangeContext
	}
	return SpanningDependenciesArchive_DEFAULT
}

func (m *SpanningDependenciesArchive_ReferringColumnToRemoteCells) GetInternalCellReference() []*InternalCellReferenceArchive {
	if m != nil {
		return m.InternalCellReference
	}
	return nil
}

type WholeOwnerDependenciesArchive struct {
	DependentCell    []*InternalCellReferenceArchive `protobuf:"bytes,1,rep,name=dependent_cell" json:"dependent_cell,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *WholeOwnerDependenciesArchive) Reset()         { *m = WholeOwnerDependenciesArchive{} }
func (m *WholeOwnerDependenciesArchive) String() string { return proto.CompactTextString(m) }
func (*WholeOwnerDependenciesArchive) ProtoMessage()    {}

func (m *WholeOwnerDependenciesArchive) GetDependentCell() []*InternalCellReferenceArchive {
	if m != nil {
		return m.DependentCell
	}
	return nil
}

type FormulaOwnerInfoArchive struct {
	FormulaOwnerId             *CFUUIDArchive                 `protobuf:"bytes,1,req,name=formula_owner_id" json:"formula_owner_id,omitempty"`
	CellDependencies           *CellDependenciesArchive       `protobuf:"bytes,2,opt,name=cell_dependencies" json:"cell_dependencies,omitempty"`
	RangeDependencies          *RangeDependenciesArchive      `protobuf:"bytes,3,opt,name=range_dependencies" json:"range_dependencies,omitempty"`
	VolatileDependencies       *VolatileDependenciesArchive   `protobuf:"bytes,4,opt,name=volatile_dependencies" json:"volatile_dependencies,omitempty"`
	SpanningColumnDependencies *SpanningDependenciesArchive   `protobuf:"bytes,5,opt,name=spanning_column_dependencies" json:"spanning_column_dependencies,omitempty"`
	SpanningRowDependencies    *SpanningDependenciesArchive   `protobuf:"bytes,6,opt,name=spanning_row_dependencies" json:"spanning_row_dependencies,omitempty"`
	WholeOwnerDependencies     *WholeOwnerDependenciesArchive `protobuf:"bytes,8,opt,name=whole_owner_dependencies" json:"whole_owner_dependencies,omitempty"`
	FormulaOwner               *TSP.Reference                 `protobuf:"bytes,7,opt,name=formula_owner" json:"formula_owner,omitempty"`
	XXX_unrecognized           []byte                         `json:"-"`
}

func (m *FormulaOwnerInfoArchive) Reset()         { *m = FormulaOwnerInfoArchive{} }
func (m *FormulaOwnerInfoArchive) String() string { return proto.CompactTextString(m) }
func (*FormulaOwnerInfoArchive) ProtoMessage()    {}

func (m *FormulaOwnerInfoArchive) GetFormulaOwnerId() *CFUUIDArchive {
	if m != nil {
		return m.FormulaOwnerId
	}
	return nil
}

func (m *FormulaOwnerInfoArchive) GetCellDependencies() *CellDependenciesArchive {
	if m != nil {
		return m.CellDependencies
	}
	return nil
}

func (m *FormulaOwnerInfoArchive) GetRangeDependencies() *RangeDependenciesArchive {
	if m != nil {
		return m.RangeDependencies
	}
	return nil
}

func (m *FormulaOwnerInfoArchive) GetVolatileDependencies() *VolatileDependenciesArchive {
	if m != nil {
		return m.VolatileDependencies
	}
	return nil
}

func (m *FormulaOwnerInfoArchive) GetSpanningColumnDependencies() *SpanningDependenciesArchive {
	if m != nil {
		return m.SpanningColumnDependencies
	}
	return nil
}

func (m *FormulaOwnerInfoArchive) GetSpanningRowDependencies() *SpanningDependenciesArchive {
	if m != nil {
		return m.SpanningRowDependencies
	}
	return nil
}

func (m *FormulaOwnerInfoArchive) GetWholeOwnerDependencies() *WholeOwnerDependenciesArchive {
	if m != nil {
		return m.WholeOwnerDependencies
	}
	return nil
}

func (m *FormulaOwnerInfoArchive) GetFormulaOwner() *TSP.Reference {
	if m != nil {
		return m.FormulaOwner
	}
	return nil
}

type OwnerIDMapArchive struct {
	MapEntry         []*OwnerIDMapArchive_OwnerIDMapArchiveEntry `protobuf:"bytes,1,rep,name=map_entry" json:"map_entry,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *OwnerIDMapArchive) Reset()         { *m = OwnerIDMapArchive{} }
func (m *OwnerIDMapArchive) String() string { return proto.CompactTextString(m) }
func (*OwnerIDMapArchive) ProtoMessage()    {}

func (m *OwnerIDMapArchive) GetMapEntry() []*OwnerIDMapArchive_OwnerIDMapArchiveEntry {
	if m != nil {
		return m.MapEntry
	}
	return nil
}

type OwnerIDMapArchive_OwnerIDMapArchiveEntry struct {
	InternalOwnerId  *uint32        `protobuf:"varint,1,req,name=internal_owner_id" json:"internal_owner_id,omitempty"`
	OwnerId          *CFUUIDArchive `protobuf:"bytes,2,req,name=owner_id" json:"owner_id,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *OwnerIDMapArchive_OwnerIDMapArchiveEntry) Reset() {
	*m = OwnerIDMapArchive_OwnerIDMapArchiveEntry{}
}
func (m *OwnerIDMapArchive_OwnerIDMapArchiveEntry) String() string { return proto.CompactTextString(m) }
func (*OwnerIDMapArchive_OwnerIDMapArchiveEntry) ProtoMessage()    {}

func (m *OwnerIDMapArchive_OwnerIDMapArchiveEntry) GetInternalOwnerId() uint32 {
	if m != nil && m.InternalOwnerId != nil {
		return *m.InternalOwnerId
	}
	return 0
}

func (m *OwnerIDMapArchive_OwnerIDMapArchiveEntry) GetOwnerId() *CFUUIDArchive {
	if m != nil {
		return m.OwnerId
	}
	return nil
}

type DependencyTrackerArchive struct {
	FormulaOwnerInfo  []*FormulaOwnerInfoArchive      `protobuf:"bytes,1,rep,name=formula_owner_info" json:"formula_owner_info,omitempty"`
	DirtyLeaf         []*CellReferenceArchive         `protobuf:"bytes,2,rep,name=dirty_leaf" json:"dirty_leaf,omitempty"`
	InternalDirtyLeaf []*InternalCellReferenceArchive `protobuf:"bytes,4,rep,name=internal_dirty_leaf" json:"internal_dirty_leaf,omitempty"`
	OwnerIdMap        *OwnerIDMapArchive              `protobuf:"bytes,3,opt,name=owner_id_map" json:"owner_id_map,omitempty"`
	XXX_unrecognized  []byte                          `json:"-"`
}

func (m *DependencyTrackerArchive) Reset()         { *m = DependencyTrackerArchive{} }
func (m *DependencyTrackerArchive) String() string { return proto.CompactTextString(m) }
func (*DependencyTrackerArchive) ProtoMessage()    {}

func (m *DependencyTrackerArchive) GetFormulaOwnerInfo() []*FormulaOwnerInfoArchive {
	if m != nil {
		return m.FormulaOwnerInfo
	}
	return nil
}

func (m *DependencyTrackerArchive) GetDirtyLeaf() []*CellReferenceArchive {
	if m != nil {
		return m.DirtyLeaf
	}
	return nil
}

func (m *DependencyTrackerArchive) GetInternalDirtyLeaf() []*InternalCellReferenceArchive {
	if m != nil {
		return m.InternalDirtyLeaf
	}
	return nil
}

func (m *DependencyTrackerArchive) GetOwnerIdMap() *OwnerIDMapArchive {
	if m != nil {
		return m.OwnerIdMap
	}
	return nil
}

type NameTrackedReferencePair struct {
	Name               *string        `protobuf:"bytes,1,req,name=name" json:"name,omitempty"`
	TrackedReference   *TSP.Reference `protobuf:"bytes,2,opt,name=tracked_reference" json:"tracked_reference,omitempty"`
	TrackedReferenceId *uint32        `protobuf:"varint,3,opt,name=tracked_reference_id" json:"tracked_reference_id,omitempty"`
	XXX_unrecognized   []byte         `json:"-"`
}

func (m *NameTrackedReferencePair) Reset()         { *m = NameTrackedReferencePair{} }
func (m *NameTrackedReferencePair) String() string { return proto.CompactTextString(m) }
func (*NameTrackedReferencePair) ProtoMessage()    {}

func (m *NameTrackedReferencePair) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *NameTrackedReferencePair) GetTrackedReference() *TSP.Reference {
	if m != nil {
		return m.TrackedReference
	}
	return nil
}

func (m *NameTrackedReferencePair) GetTrackedReferenceId() uint32 {
	if m != nil && m.TrackedReferenceId != nil {
		return *m.TrackedReferenceId
	}
	return 0
}

type NamesByTrackedReferenceArchive struct {
	TableId                  *CFUUIDArchive              `protobuf:"bytes,1,req,name=table_id" json:"table_id,omitempty"`
	NameTrackedReferencePair []*NameTrackedReferencePair `protobuf:"bytes,2,rep,name=name_tracked_reference_pair" json:"name_tracked_reference_pair,omitempty"`
	XXX_unrecognized         []byte                      `json:"-"`
}

func (m *NamesByTrackedReferenceArchive) Reset()         { *m = NamesByTrackedReferenceArchive{} }
func (m *NamesByTrackedReferenceArchive) String() string { return proto.CompactTextString(m) }
func (*NamesByTrackedReferenceArchive) ProtoMessage()    {}

func (m *NamesByTrackedReferenceArchive) GetTableId() *CFUUIDArchive {
	if m != nil {
		return m.TableId
	}
	return nil
}

func (m *NamesByTrackedReferenceArchive) GetNameTrackedReferencePair() []*NameTrackedReferencePair {
	if m != nil {
		return m.NameTrackedReferencePair
	}
	return nil
}

type NamedReferenceManagerArchive struct {
	ReferenceTracker               *TSP.Reference                    `protobuf:"bytes,1,req,name=reference_tracker" json:"reference_tracker,omitempty"`
	NamesByTrackedReferenceByTable []*NamesByTrackedReferenceArchive `protobuf:"bytes,2,rep,name=names_by_tracked_reference_by_table" json:"names_by_tracked_reference_by_table,omitempty"`
	XXX_unrecognized               []byte                            `json:"-"`
}

func (m *NamedReferenceManagerArchive) Reset()         { *m = NamedReferenceManagerArchive{} }
func (m *NamedReferenceManagerArchive) String() string { return proto.CompactTextString(m) }
func (*NamedReferenceManagerArchive) ProtoMessage()    {}

func (m *NamedReferenceManagerArchive) GetReferenceTracker() *TSP.Reference {
	if m != nil {
		return m.ReferenceTracker
	}
	return nil
}

func (m *NamedReferenceManagerArchive) GetNamesByTrackedReferenceByTable() []*NamesByTrackedReferenceArchive {
	if m != nil {
		return m.NamesByTrackedReferenceByTable
	}
	return nil
}

type CalculationEngineArchive struct {
	BaseDate_1904         *bool                                         `protobuf:"varint,1,opt,name=base_date_1904" json:"base_date_1904,omitempty"`
	DependencyTracker     *DependencyTrackerArchive                     `protobuf:"bytes,2,req,name=dependency_tracker" json:"dependency_tracker,omitempty"`
	NamedReferenceManager *TSP.Reference                                `protobuf:"bytes,3,opt,name=named_reference_manager" json:"named_reference_manager,omitempty"`
	ExcelImportDateMode   *CalculationEngineArchive_ExcelImportDateMode `protobuf:"varint,4,opt,name=excel_import_date_mode,enum=TSCE.CalculationEngineArchive_ExcelImportDateMode,def=1" json:"excel_import_date_mode,omitempty"`
	SavedLocaleIdentifier *string                                       `protobuf:"bytes,5,opt,name=saved_locale_identifier" json:"saved_locale_identifier,omitempty"`
	XXX_unrecognized      []byte                                        `json:"-"`
}

func (m *CalculationEngineArchive) Reset()         { *m = CalculationEngineArchive{} }
func (m *CalculationEngineArchive) String() string { return proto.CompactTextString(m) }
func (*CalculationEngineArchive) ProtoMessage()    {}

const Default_CalculationEngineArchive_ExcelImportDateMode CalculationEngineArchive_ExcelImportDateMode = CalculationEngineArchive_DATE_MODE_1900

func (m *CalculationEngineArchive) GetBaseDate_1904() bool {
	if m != nil && m.BaseDate_1904 != nil {
		return *m.BaseDate_1904
	}
	return false
}

func (m *CalculationEngineArchive) GetDependencyTracker() *DependencyTrackerArchive {
	if m != nil {
		return m.DependencyTracker
	}
	return nil
}

func (m *CalculationEngineArchive) GetNamedReferenceManager() *TSP.Reference {
	if m != nil {
		return m.NamedReferenceManager
	}
	return nil
}

func (m *CalculationEngineArchive) GetExcelImportDateMode() CalculationEngineArchive_ExcelImportDateMode {
	if m != nil && m.ExcelImportDateMode != nil {
		return *m.ExcelImportDateMode
	}
	return Default_CalculationEngineArchive_ExcelImportDateMode
}

func (m *CalculationEngineArchive) GetSavedLocaleIdentifier() string {
	if m != nil && m.SavedLocaleIdentifier != nil {
		return *m.SavedLocaleIdentifier
	}
	return ""
}

type ASTNodeArrayArchive struct {
	ASTNode          []*ASTNodeArrayArchive_ASTNodeArchive `protobuf:"bytes,1,rep,name=AST_node" json:"AST_node,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *ASTNodeArrayArchive) Reset()         { *m = ASTNodeArrayArchive{} }
func (m *ASTNodeArrayArchive) String() string { return proto.CompactTextString(m) }
func (*ASTNodeArrayArchive) ProtoMessage()    {}

func (m *ASTNodeArrayArchive) GetASTNode() []*ASTNodeArrayArchive_ASTNodeArchive {
	if m != nil {
		return m.ASTNode
	}
	return nil
}

type ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive struct {
	RowHandle        *uint32 `protobuf:"varint,1,req,name=row_handle" json:"row_handle,omitempty"`
	ColumnHandle     *uint32 `protobuf:"varint,2,req,name=column_handle" json:"column_handle,omitempty"`
	RowIsSticky      *uint32 `protobuf:"varint,3,req,name=row_is_sticky" json:"row_is_sticky,omitempty"`
	ColumnIsSticky   *uint32 `protobuf:"varint,4,req,name=column_is_sticky" json:"column_is_sticky,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) Reset() {
	*m = ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive{}
}
func (m *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) String() string {
	return proto.CompactTextString(m)
}
func (*ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) ProtoMessage() {}

func (m *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) GetRowHandle() uint32 {
	if m != nil && m.RowHandle != nil {
		return *m.RowHandle
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) GetColumnHandle() uint32 {
	if m != nil && m.ColumnHandle != nil {
		return *m.ColumnHandle
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) GetRowIsSticky() uint32 {
	if m != nil && m.RowIsSticky != nil {
		return *m.RowIsSticky
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive) GetColumnIsSticky() uint32 {
	if m != nil && m.ColumnIsSticky != nil {
		return *m.ColumnIsSticky
	}
	return 0
}

type ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive struct {
	RowHandle                               *uint32        `protobuf:"varint,1,req,name=row_handle" json:"row_handle,omitempty"`
	ColumnHandle                            *uint32        `protobuf:"varint,2,req,name=column_handle" json:"column_handle,omitempty"`
	RowIsSticky                             *uint32        `protobuf:"varint,3,req,name=row_is_sticky" json:"row_is_sticky,omitempty"`
	ColumnIsSticky                          *uint32        `protobuf:"varint,4,req,name=column_is_sticky" json:"column_is_sticky,omitempty"`
	TableId                                 *CFUUIDArchive `protobuf:"bytes,5,req,name=table_id" json:"table_id,omitempty"`
	ASTReferenceWhitespaceAfterSheetName    *string        `protobuf:"bytes,6,opt,name=AST_reference_whitespace_after_sheet_name" json:"AST_reference_whitespace_after_sheet_name,omitempty"`
	ASTReferenceWhitespaceBeforeTableName   *string        `protobuf:"bytes,7,opt,name=AST_reference_whitespace_before_table_name" json:"AST_reference_whitespace_before_table_name,omitempty"`
	ASTReferenceWhitespaceAfterTableName    *string        `protobuf:"bytes,8,opt,name=AST_reference_whitespace_after_table_name" json:"AST_reference_whitespace_after_table_name,omitempty"`
	ASTReferenceWhitespaceBeforeCellAddress *string        `protobuf:"bytes,9,opt,name=AST_reference_whitespace_before_cell_address" json:"AST_reference_whitespace_before_cell_address,omitempty"`
	XXX_unrecognized                        []byte         `json:"-"`
}

func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) Reset() {
	*m = ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive{}
}
func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) String() string {
	return proto.CompactTextString(m)
}
func (*ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) ProtoMessage() {}

func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetRowHandle() uint32 {
	if m != nil && m.RowHandle != nil {
		return *m.RowHandle
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetColumnHandle() uint32 {
	if m != nil && m.ColumnHandle != nil {
		return *m.ColumnHandle
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetRowIsSticky() uint32 {
	if m != nil && m.RowIsSticky != nil {
		return *m.RowIsSticky
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetColumnIsSticky() uint32 {
	if m != nil && m.ColumnIsSticky != nil {
		return *m.ColumnIsSticky
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetTableId() *CFUUIDArchive {
	if m != nil {
		return m.TableId
	}
	return nil
}

func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetASTReferenceWhitespaceAfterSheetName() string {
	if m != nil && m.ASTReferenceWhitespaceAfterSheetName != nil {
		return *m.ASTReferenceWhitespaceAfterSheetName
	}
	return ""
}

func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetASTReferenceWhitespaceBeforeTableName() string {
	if m != nil && m.ASTReferenceWhitespaceBeforeTableName != nil {
		return *m.ASTReferenceWhitespaceBeforeTableName
	}
	return ""
}

func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetASTReferenceWhitespaceAfterTableName() string {
	if m != nil && m.ASTReferenceWhitespaceAfterTableName != nil {
		return *m.ASTReferenceWhitespaceAfterTableName
	}
	return ""
}

func (m *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive) GetASTReferenceWhitespaceBeforeCellAddress() string {
	if m != nil && m.ASTReferenceWhitespaceBeforeCellAddress != nil {
		return *m.ASTReferenceWhitespaceBeforeCellAddress
	}
	return ""
}

type ASTNodeArrayArchive_ASTColumnCoordinateArchive struct {
	Column           *int32 `protobuf:"zigzag32,1,req,name=column" json:"column,omitempty"`
	Absolute         *bool  `protobuf:"varint,2,opt,name=absolute,def=0" json:"absolute,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ASTNodeArrayArchive_ASTColumnCoordinateArchive) Reset() {
	*m = ASTNodeArrayArchive_ASTColumnCoordinateArchive{}
}
func (m *ASTNodeArrayArchive_ASTColumnCoordinateArchive) String() string {
	return proto.CompactTextString(m)
}
func (*ASTNodeArrayArchive_ASTColumnCoordinateArchive) ProtoMessage() {}

const Default_ASTNodeArrayArchive_ASTColumnCoordinateArchive_Absolute bool = false

func (m *ASTNodeArrayArchive_ASTColumnCoordinateArchive) GetColumn() int32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTColumnCoordinateArchive) GetAbsolute() bool {
	if m != nil && m.Absolute != nil {
		return *m.Absolute
	}
	return Default_ASTNodeArrayArchive_ASTColumnCoordinateArchive_Absolute
}

type ASTNodeArrayArchive_ASTRowCoordinateArchive struct {
	Row              *int32 `protobuf:"zigzag32,1,req,name=row" json:"row,omitempty"`
	Absolute         *bool  `protobuf:"varint,2,opt,name=absolute,def=0" json:"absolute,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *ASTNodeArrayArchive_ASTRowCoordinateArchive) Reset() {
	*m = ASTNodeArrayArchive_ASTRowCoordinateArchive{}
}
func (m *ASTNodeArrayArchive_ASTRowCoordinateArchive) String() string {
	return proto.CompactTextString(m)
}
func (*ASTNodeArrayArchive_ASTRowCoordinateArchive) ProtoMessage() {}

const Default_ASTNodeArrayArchive_ASTRowCoordinateArchive_Absolute bool = false

func (m *ASTNodeArrayArchive_ASTRowCoordinateArchive) GetRow() int32 {
	if m != nil && m.Row != nil {
		return *m.Row
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTRowCoordinateArchive) GetAbsolute() bool {
	if m != nil && m.Absolute != nil {
		return *m.Absolute
	}
	return Default_ASTNodeArrayArchive_ASTRowCoordinateArchive_Absolute
}

type ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive struct {
	TableId                                 *CFUUIDArchive `protobuf:"bytes,1,req,name=table_id" json:"table_id,omitempty"`
	ASTReferenceWhitespaceAfterSheetName    *string        `protobuf:"bytes,2,opt,name=AST_reference_whitespace_after_sheet_name" json:"AST_reference_whitespace_after_sheet_name,omitempty"`
	ASTReferenceWhitespaceBeforeTableName   *string        `protobuf:"bytes,3,opt,name=AST_reference_whitespace_before_table_name" json:"AST_reference_whitespace_before_table_name,omitempty"`
	ASTReferenceWhitespaceAfterTableName    *string        `protobuf:"bytes,4,opt,name=AST_reference_whitespace_after_table_name" json:"AST_reference_whitespace_after_table_name,omitempty"`
	ASTReferenceWhitespaceBeforeCellAddress *string        `protobuf:"bytes,5,opt,name=AST_reference_whitespace_before_cell_address" json:"AST_reference_whitespace_before_cell_address,omitempty"`
	XXX_unrecognized                        []byte         `json:"-"`
}

func (m *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) Reset() {
	*m = ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive{}
}
func (m *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) String() string {
	return proto.CompactTextString(m)
}
func (*ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) ProtoMessage() {}

func (m *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) GetTableId() *CFUUIDArchive {
	if m != nil {
		return m.TableId
	}
	return nil
}

func (m *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) GetASTReferenceWhitespaceAfterSheetName() string {
	if m != nil && m.ASTReferenceWhitespaceAfterSheetName != nil {
		return *m.ASTReferenceWhitespaceAfterSheetName
	}
	return ""
}

func (m *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) GetASTReferenceWhitespaceBeforeTableName() string {
	if m != nil && m.ASTReferenceWhitespaceBeforeTableName != nil {
		return *m.ASTReferenceWhitespaceBeforeTableName
	}
	return ""
}

func (m *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) GetASTReferenceWhitespaceAfterTableName() string {
	if m != nil && m.ASTReferenceWhitespaceAfterTableName != nil {
		return *m.ASTReferenceWhitespaceAfterTableName
	}
	return ""
}

func (m *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive) GetASTReferenceWhitespaceBeforeCellAddress() string {
	if m != nil && m.ASTReferenceWhitespaceBeforeCellAddress != nil {
		return *m.ASTReferenceWhitespaceBeforeCellAddress
	}
	return ""
}

type ASTNodeArrayArchive_ASTNodeArchive struct {
	ASTNodeType                             *ASTNodeArrayArchive_ASTNodeType                            `protobuf:"varint,1,req,name=AST_node_type,enum=TSCE.ASTNodeArrayArchive_ASTNodeType" json:"AST_node_type,omitempty"`
	ASTFunctionNodeIndex                    *uint32                                                     `protobuf:"varint,2,opt,name=AST_function_node_index" json:"AST_function_node_index,omitempty"`
	ASTFunctionNodeNumArgs                  *uint32                                                     `protobuf:"varint,3,opt,name=AST_function_node_numArgs" json:"AST_function_node_numArgs,omitempty"`
	ASTNumberNodeNumber                     *float64                                                    `protobuf:"fixed64,4,opt,name=AST_number_node_number" json:"AST_number_node_number,omitempty"`
	ASTBooleanNodeBoolean                   *bool                                                       `protobuf:"varint,5,opt,name=AST_boolean_node_boolean" json:"AST_boolean_node_boolean,omitempty"`
	ASTStringNodeString                     *string                                                     `protobuf:"bytes,6,opt,name=AST_string_node_string" json:"AST_string_node_string,omitempty"`
	ASTDateNodeDateNum                      *float64                                                    `protobuf:"fixed64,7,opt,name=AST_date_node_dateNum" json:"AST_date_node_dateNum,omitempty"`
	ASTDateNodeSuppressDateFormat           *bool                                                       `protobuf:"varint,19,opt,name=AST_date_node_suppress_date_format" json:"AST_date_node_suppress_date_format,omitempty"`
	ASTDateNodeSuppressTimeFormat           *bool                                                       `protobuf:"varint,20,opt,name=AST_date_node_suppress_time_format" json:"AST_date_node_suppress_time_format,omitempty"`
	ASTDateNodeDateTimeFormat               *string                                                     `protobuf:"bytes,21,opt,name=AST_date_node_date_time_format" json:"AST_date_node_date_time_format,omitempty"`
	ASTDurationNodeUnitNum                  *float64                                                    `protobuf:"fixed64,8,opt,name=AST_duration_node_unitNum" json:"AST_duration_node_unitNum,omitempty"`
	ASTDurationNodeUnit                     *int32                                                      `protobuf:"varint,9,opt,name=AST_duration_node_unit" json:"AST_duration_node_unit,omitempty"`
	ASTDurationNodeStyle                    *uint32                                                     `protobuf:"varint,22,opt,name=AST_duration_node_style" json:"AST_duration_node_style,omitempty"`
	ASTDurationNodeDurationUnitLargest      *uint32                                                     `protobuf:"varint,23,opt,name=AST_duration_node_duration_unit_largest" json:"AST_duration_node_duration_unit_largest,omitempty"`
	ASTDurationNodeDurationUnitSmallest     *uint32                                                     `protobuf:"varint,24,opt,name=AST_duration_node_duration_unit_smallest" json:"AST_duration_node_duration_unit_smallest,omitempty"`
	ASTDurationNodeUseAutomaticUnits        *bool                                                       `protobuf:"varint,29,opt,name=AST_duration_node_use_automatic_units" json:"AST_duration_node_use_automatic_units,omitempty"`
	ASTTokenNodeBoolean                     *bool                                                       `protobuf:"varint,10,opt,name=AST_token_node_boolean" json:"AST_token_node_boolean,omitempty"`
	ASTArrayNodeNumCol                      *uint32                                                     `protobuf:"varint,11,opt,name=AST_array_node_numCol" json:"AST_array_node_numCol,omitempty"`
	ASTArrayNodeNumRow                      *uint32                                                     `protobuf:"varint,12,opt,name=AST_array_node_numRow" json:"AST_array_node_numRow,omitempty"`
	ASTListNodeNumArgs                      *uint32                                                     `protobuf:"varint,13,opt,name=AST_list_node_numArgs" json:"AST_list_node_numArgs,omitempty"`
	ASTThunkNodeArray                       *ASTNodeArrayArchive                                        `protobuf:"bytes,14,opt,name=AST_thunk_node_array" json:"AST_thunk_node_array,omitempty"`
	ASTLocalCellReferenceNodeReference      *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive       `protobuf:"bytes,15,opt,name=AST_local_cell_reference_node_reference" json:"AST_local_cell_reference_node_reference,omitempty"`
	ASTCrossTableCellReferenceNodeReference *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive  `protobuf:"bytes,16,opt,name=AST_cross_table_cell_reference_node_reference" json:"AST_cross_table_cell_reference_node_reference,omitempty"`
	ASTUnknownFunctionNodeString            *string                                                     `protobuf:"bytes,17,opt,name=AST_unknown_function_node_string" json:"AST_unknown_function_node_string,omitempty"`
	ASTUnknownFunctionNodeNumArgs           *uint32                                                     `protobuf:"varint,18,opt,name=AST_unknown_function_node_numArgs" json:"AST_unknown_function_node_numArgs,omitempty"`
	ASTWhitespace                           *string                                                     `protobuf:"bytes,25,opt,name=AST_whitespace" json:"AST_whitespace,omitempty"`
	ASTColumn                               *ASTNodeArrayArchive_ASTColumnCoordinateArchive             `protobuf:"bytes,26,opt,name=AST_column" json:"AST_column,omitempty"`
	ASTRow                                  *ASTNodeArrayArchive_ASTRowCoordinateArchive                `protobuf:"bytes,27,opt,name=AST_row" json:"AST_row,omitempty"`
	ASTCrossTableReferenceExtraInfo         *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive `protobuf:"bytes,28,opt,name=AST_cross_table_reference_extra_info" json:"AST_cross_table_reference_extra_info,omitempty"`
	XXX_unrecognized                        []byte                                                      `json:"-"`
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) Reset()         { *m = ASTNodeArrayArchive_ASTNodeArchive{} }
func (m *ASTNodeArrayArchive_ASTNodeArchive) String() string { return proto.CompactTextString(m) }
func (*ASTNodeArrayArchive_ASTNodeArchive) ProtoMessage()    {}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTNodeType() ASTNodeArrayArchive_ASTNodeType {
	if m != nil && m.ASTNodeType != nil {
		return *m.ASTNodeType
	}
	return ASTNodeArrayArchive_ADDITION_NODE
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTFunctionNodeIndex() uint32 {
	if m != nil && m.ASTFunctionNodeIndex != nil {
		return *m.ASTFunctionNodeIndex
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTFunctionNodeNumArgs() uint32 {
	if m != nil && m.ASTFunctionNodeNumArgs != nil {
		return *m.ASTFunctionNodeNumArgs
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTNumberNodeNumber() float64 {
	if m != nil && m.ASTNumberNodeNumber != nil {
		return *m.ASTNumberNodeNumber
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTBooleanNodeBoolean() bool {
	if m != nil && m.ASTBooleanNodeBoolean != nil {
		return *m.ASTBooleanNodeBoolean
	}
	return false
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTStringNodeString() string {
	if m != nil && m.ASTStringNodeString != nil {
		return *m.ASTStringNodeString
	}
	return ""
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTDateNodeDateNum() float64 {
	if m != nil && m.ASTDateNodeDateNum != nil {
		return *m.ASTDateNodeDateNum
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTDateNodeSuppressDateFormat() bool {
	if m != nil && m.ASTDateNodeSuppressDateFormat != nil {
		return *m.ASTDateNodeSuppressDateFormat
	}
	return false
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTDateNodeSuppressTimeFormat() bool {
	if m != nil && m.ASTDateNodeSuppressTimeFormat != nil {
		return *m.ASTDateNodeSuppressTimeFormat
	}
	return false
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTDateNodeDateTimeFormat() string {
	if m != nil && m.ASTDateNodeDateTimeFormat != nil {
		return *m.ASTDateNodeDateTimeFormat
	}
	return ""
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeUnitNum() float64 {
	if m != nil && m.ASTDurationNodeUnitNum != nil {
		return *m.ASTDurationNodeUnitNum
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeUnit() int32 {
	if m != nil && m.ASTDurationNodeUnit != nil {
		return *m.ASTDurationNodeUnit
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeStyle() uint32 {
	if m != nil && m.ASTDurationNodeStyle != nil {
		return *m.ASTDurationNodeStyle
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeDurationUnitLargest() uint32 {
	if m != nil && m.ASTDurationNodeDurationUnitLargest != nil {
		return *m.ASTDurationNodeDurationUnitLargest
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeDurationUnitSmallest() uint32 {
	if m != nil && m.ASTDurationNodeDurationUnitSmallest != nil {
		return *m.ASTDurationNodeDurationUnitSmallest
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTDurationNodeUseAutomaticUnits() bool {
	if m != nil && m.ASTDurationNodeUseAutomaticUnits != nil {
		return *m.ASTDurationNodeUseAutomaticUnits
	}
	return false
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTTokenNodeBoolean() bool {
	if m != nil && m.ASTTokenNodeBoolean != nil {
		return *m.ASTTokenNodeBoolean
	}
	return false
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTArrayNodeNumCol() uint32 {
	if m != nil && m.ASTArrayNodeNumCol != nil {
		return *m.ASTArrayNodeNumCol
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTArrayNodeNumRow() uint32 {
	if m != nil && m.ASTArrayNodeNumRow != nil {
		return *m.ASTArrayNodeNumRow
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTListNodeNumArgs() uint32 {
	if m != nil && m.ASTListNodeNumArgs != nil {
		return *m.ASTListNodeNumArgs
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTThunkNodeArray() *ASTNodeArrayArchive {
	if m != nil {
		return m.ASTThunkNodeArray
	}
	return nil
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTLocalCellReferenceNodeReference() *ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchive {
	if m != nil {
		return m.ASTLocalCellReferenceNodeReference
	}
	return nil
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTCrossTableCellReferenceNodeReference() *ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchive {
	if m != nil {
		return m.ASTCrossTableCellReferenceNodeReference
	}
	return nil
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTUnknownFunctionNodeString() string {
	if m != nil && m.ASTUnknownFunctionNodeString != nil {
		return *m.ASTUnknownFunctionNodeString
	}
	return ""
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTUnknownFunctionNodeNumArgs() uint32 {
	if m != nil && m.ASTUnknownFunctionNodeNumArgs != nil {
		return *m.ASTUnknownFunctionNodeNumArgs
	}
	return 0
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTWhitespace() string {
	if m != nil && m.ASTWhitespace != nil {
		return *m.ASTWhitespace
	}
	return ""
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTColumn() *ASTNodeArrayArchive_ASTColumnCoordinateArchive {
	if m != nil {
		return m.ASTColumn
	}
	return nil
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTRow() *ASTNodeArrayArchive_ASTRowCoordinateArchive {
	if m != nil {
		return m.ASTRow
	}
	return nil
}

func (m *ASTNodeArrayArchive_ASTNodeArchive) GetASTCrossTableReferenceExtraInfo() *ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchive {
	if m != nil {
		return m.ASTCrossTableReferenceExtraInfo
	}
	return nil
}

type FormulaTranslationFlagsArchive struct {
	ExcelImportTranslation                 *bool  `protobuf:"varint,1,opt,name=excel_import_translation,def=0" json:"excel_import_translation,omitempty"`
	NumberToDateCoercionRemovalTranslation *bool  `protobuf:"varint,2,opt,name=number_to_date_coercion_removal_translation,def=0" json:"number_to_date_coercion_removal_translation,omitempty"`
	XXX_unrecognized                       []byte `json:"-"`
}

func (m *FormulaTranslationFlagsArchive) Reset()         { *m = FormulaTranslationFlagsArchive{} }
func (m *FormulaTranslationFlagsArchive) String() string { return proto.CompactTextString(m) }
func (*FormulaTranslationFlagsArchive) ProtoMessage()    {}

const Default_FormulaTranslationFlagsArchive_ExcelImportTranslation bool = false
const Default_FormulaTranslationFlagsArchive_NumberToDateCoercionRemovalTranslation bool = false

func (m *FormulaTranslationFlagsArchive) GetExcelImportTranslation() bool {
	if m != nil && m.ExcelImportTranslation != nil {
		return *m.ExcelImportTranslation
	}
	return Default_FormulaTranslationFlagsArchive_ExcelImportTranslation
}

func (m *FormulaTranslationFlagsArchive) GetNumberToDateCoercionRemovalTranslation() bool {
	if m != nil && m.NumberToDateCoercionRemovalTranslation != nil {
		return *m.NumberToDateCoercionRemovalTranslation
	}
	return Default_FormulaTranslationFlagsArchive_NumberToDateCoercionRemovalTranslation
}

type FormulaArchive struct {
	ASTNodeArray         *ASTNodeArrayArchive            `protobuf:"bytes,1,req,name=AST_node_array" json:"AST_node_array,omitempty"`
	HostColumn           *uint32                         `protobuf:"varint,2,opt,name=host_column" json:"host_column,omitempty"`
	HostRow              *uint32                         `protobuf:"varint,3,opt,name=host_row" json:"host_row,omitempty"`
	HostColumnIsNegative *bool                           `protobuf:"varint,4,opt,name=host_column_is_negative,def=0" json:"host_column_is_negative,omitempty"`
	HostRowIsNegative    *bool                           `protobuf:"varint,5,opt,name=host_row_is_negative,def=0" json:"host_row_is_negative,omitempty"`
	TranslationFlags     *FormulaTranslationFlagsArchive `protobuf:"bytes,6,opt,name=translation_flags" json:"translation_flags,omitempty"`
	XXX_unrecognized     []byte                          `json:"-"`
}

func (m *FormulaArchive) Reset()         { *m = FormulaArchive{} }
func (m *FormulaArchive) String() string { return proto.CompactTextString(m) }
func (*FormulaArchive) ProtoMessage()    {}

const Default_FormulaArchive_HostColumnIsNegative bool = false
const Default_FormulaArchive_HostRowIsNegative bool = false

func (m *FormulaArchive) GetASTNodeArray() *ASTNodeArrayArchive {
	if m != nil {
		return m.ASTNodeArray
	}
	return nil
}

func (m *FormulaArchive) GetHostColumn() uint32 {
	if m != nil && m.HostColumn != nil {
		return *m.HostColumn
	}
	return 0
}

func (m *FormulaArchive) GetHostRow() uint32 {
	if m != nil && m.HostRow != nil {
		return *m.HostRow
	}
	return 0
}

func (m *FormulaArchive) GetHostColumnIsNegative() bool {
	if m != nil && m.HostColumnIsNegative != nil {
		return *m.HostColumnIsNegative
	}
	return Default_FormulaArchive_HostColumnIsNegative
}

func (m *FormulaArchive) GetHostRowIsNegative() bool {
	if m != nil && m.HostRowIsNegative != nil {
		return *m.HostRowIsNegative
	}
	return Default_FormulaArchive_HostRowIsNegative
}

func (m *FormulaArchive) GetTranslationFlags() *FormulaTranslationFlagsArchive {
	if m != nil {
		return m.TranslationFlags
	}
	return nil
}

type FormatStructArchive struct {
	FormatType             *uint32 `protobuf:"varint,1,req,name=format_type" json:"format_type,omitempty"`
	DecimalPlaces          *uint32 `protobuf:"varint,2,opt,name=decimal_places" json:"decimal_places,omitempty"`
	CurrencyCode           *string `protobuf:"bytes,3,opt,name=currency_code" json:"currency_code,omitempty"`
	NegativeStyle          *uint32 `protobuf:"varint,4,opt,name=negative_style" json:"negative_style,omitempty"`
	ShowThousandsSeparator *bool   `protobuf:"varint,5,opt,name=show_thousands_separator" json:"show_thousands_separator,omitempty"`
	UseAccountingStyle     *bool   `protobuf:"varint,6,opt,name=use_accounting_style" json:"use_accounting_style,omitempty"`
	DurationStyle          *uint32 `protobuf:"varint,7,opt,name=duration_style" json:"duration_style,omitempty"`
	Base                   *uint32 `protobuf:"varint,8,opt,name=base" json:"base,omitempty"`
	BasePlaces             *uint32 `protobuf:"varint,9,opt,name=base_places" json:"base_places,omitempty"`
	BaseUseMinusSign       *bool   `protobuf:"varint,10,opt,name=base_use_minus_sign" json:"base_use_minus_sign,omitempty"`
	FractionAccuracy       *uint32 `protobuf:"varint,11,opt,name=fraction_accuracy" json:"fraction_accuracy,omitempty"`
	SuppressDateFormat     *bool   `protobuf:"varint,12,opt,name=suppress_date_format" json:"suppress_date_format,omitempty"`
	SuppressTimeFormat     *bool   `protobuf:"varint,13,opt,name=suppress_time_format" json:"suppress_time_format,omitempty"`
	DateTimeFormat         *string `protobuf:"bytes,14,opt,name=date_time_format" json:"date_time_format,omitempty"`
	DurationUnitLargest    *uint32 `protobuf:"varint,15,opt,name=duration_unit_largest" json:"duration_unit_largest,omitempty"`
	DurationUnitSmallest   *uint32 `protobuf:"varint,16,opt,name=duration_unit_smallest" json:"duration_unit_smallest,omitempty"`
	XXX_unrecognized       []byte  `json:"-"`
}

func (m *FormatStructArchive) Reset()         { *m = FormatStructArchive{} }
func (m *FormatStructArchive) String() string { return proto.CompactTextString(m) }
func (*FormatStructArchive) ProtoMessage()    {}

func (m *FormatStructArchive) GetFormatType() uint32 {
	if m != nil && m.FormatType != nil {
		return *m.FormatType
	}
	return 0
}

func (m *FormatStructArchive) GetDecimalPlaces() uint32 {
	if m != nil && m.DecimalPlaces != nil {
		return *m.DecimalPlaces
	}
	return 0
}

func (m *FormatStructArchive) GetCurrencyCode() string {
	if m != nil && m.CurrencyCode != nil {
		return *m.CurrencyCode
	}
	return ""
}

func (m *FormatStructArchive) GetNegativeStyle() uint32 {
	if m != nil && m.NegativeStyle != nil {
		return *m.NegativeStyle
	}
	return 0
}

func (m *FormatStructArchive) GetShowThousandsSeparator() bool {
	if m != nil && m.ShowThousandsSeparator != nil {
		return *m.ShowThousandsSeparator
	}
	return false
}

func (m *FormatStructArchive) GetUseAccountingStyle() bool {
	if m != nil && m.UseAccountingStyle != nil {
		return *m.UseAccountingStyle
	}
	return false
}

func (m *FormatStructArchive) GetDurationStyle() uint32 {
	if m != nil && m.DurationStyle != nil {
		return *m.DurationStyle
	}
	return 0
}

func (m *FormatStructArchive) GetBase() uint32 {
	if m != nil && m.Base != nil {
		return *m.Base
	}
	return 0
}

func (m *FormatStructArchive) GetBasePlaces() uint32 {
	if m != nil && m.BasePlaces != nil {
		return *m.BasePlaces
	}
	return 0
}

func (m *FormatStructArchive) GetBaseUseMinusSign() bool {
	if m != nil && m.BaseUseMinusSign != nil {
		return *m.BaseUseMinusSign
	}
	return false
}

func (m *FormatStructArchive) GetFractionAccuracy() uint32 {
	if m != nil && m.FractionAccuracy != nil {
		return *m.FractionAccuracy
	}
	return 0
}

func (m *FormatStructArchive) GetSuppressDateFormat() bool {
	if m != nil && m.SuppressDateFormat != nil {
		return *m.SuppressDateFormat
	}
	return false
}

func (m *FormatStructArchive) GetSuppressTimeFormat() bool {
	if m != nil && m.SuppressTimeFormat != nil {
		return *m.SuppressTimeFormat
	}
	return false
}

func (m *FormatStructArchive) GetDateTimeFormat() string {
	if m != nil && m.DateTimeFormat != nil {
		return *m.DateTimeFormat
	}
	return ""
}

func (m *FormatStructArchive) GetDurationUnitLargest() uint32 {
	if m != nil && m.DurationUnitLargest != nil {
		return *m.DurationUnitLargest
	}
	return 0
}

func (m *FormatStructArchive) GetDurationUnitSmallest() uint32 {
	if m != nil && m.DurationUnitSmallest != nil {
		return *m.DurationUnitSmallest
	}
	return 0
}

type RangeCoordinateArchive struct {
	TopLeftColumn     *uint32 `protobuf:"varint,1,req,name=top_left_column" json:"top_left_column,omitempty"`
	TopLeftRow        *uint32 `protobuf:"varint,2,req,name=top_left_row" json:"top_left_row,omitempty"`
	BottomRightColumn *uint32 `protobuf:"varint,3,req,name=bottom_right_column" json:"bottom_right_column,omitempty"`
	BottomRightRow    *uint32 `protobuf:"varint,4,req,name=bottom_right_row" json:"bottom_right_row,omitempty"`
	XXX_unrecognized  []byte  `json:"-"`
}

func (m *RangeCoordinateArchive) Reset()         { *m = RangeCoordinateArchive{} }
func (m *RangeCoordinateArchive) String() string { return proto.CompactTextString(m) }
func (*RangeCoordinateArchive) ProtoMessage()    {}

func (m *RangeCoordinateArchive) GetTopLeftColumn() uint32 {
	if m != nil && m.TopLeftColumn != nil {
		return *m.TopLeftColumn
	}
	return 0
}

func (m *RangeCoordinateArchive) GetTopLeftRow() uint32 {
	if m != nil && m.TopLeftRow != nil {
		return *m.TopLeftRow
	}
	return 0
}

func (m *RangeCoordinateArchive) GetBottomRightColumn() uint32 {
	if m != nil && m.BottomRightColumn != nil {
		return *m.BottomRightColumn
	}
	return 0
}

func (m *RangeCoordinateArchive) GetBottomRightRow() uint32 {
	if m != nil && m.BottomRightRow != nil {
		return *m.BottomRightRow
	}
	return 0
}

type TectonicShiftArchive struct {
	GridCoordinateOffsetX           *uint32                 `protobuf:"varint,1,req,name=grid_coordinate_offset_x" json:"grid_coordinate_offset_x,omitempty"`
	GridCoordinateOffsetY           *uint32                 `protobuf:"varint,2,req,name=grid_coordinate_offset_y" json:"grid_coordinate_offset_y,omitempty"`
	GridCoordinateOffsetXIsNegative *bool                   `protobuf:"varint,3,req,name=grid_coordinate_offset_x_is_negative" json:"grid_coordinate_offset_x_is_negative,omitempty"`
	GridCoordinateOffsetYIsNegative *bool                   `protobuf:"varint,4,req,name=grid_coordinate_offset_y_is_negative" json:"grid_coordinate_offset_y_is_negative,omitempty"`
	RangeForShift                   *RangeCoordinateArchive `protobuf:"bytes,5,opt,name=range_for_shift" json:"range_for_shift,omitempty"`
	RangeForDeletion                *RangeCoordinateArchive `protobuf:"bytes,6,opt,name=range_for_deletion" json:"range_for_deletion,omitempty"`
	InsertedRange                   *RangeCoordinateArchive `protobuf:"bytes,7,opt,name=inserted_range" json:"inserted_range,omitempty"`
	ApplyToAbsolute                 *bool                   `protobuf:"varint,8,req,name=apply_to_absolute" json:"apply_to_absolute,omitempty"`
	InsertingAfter                  *bool                   `protobuf:"varint,9,req,name=inserting_after" json:"inserting_after,omitempty"`
	IgnoreStickyBits                *bool                   `protobuf:"varint,10,req,name=ignore_sticky_bits" json:"ignore_sticky_bits,omitempty"`
	TableRange                      *RangeCoordinateArchive `protobuf:"bytes,11,opt,name=table_range" json:"table_range,omitempty"`
	TableId                         *CFUUIDArchive          `protobuf:"bytes,12,opt,name=table_id" json:"table_id,omitempty"`
	XXX_unrecognized                []byte                  `json:"-"`
}

func (m *TectonicShiftArchive) Reset()         { *m = TectonicShiftArchive{} }
func (m *TectonicShiftArchive) String() string { return proto.CompactTextString(m) }
func (*TectonicShiftArchive) ProtoMessage()    {}

func (m *TectonicShiftArchive) GetGridCoordinateOffsetX() uint32 {
	if m != nil && m.GridCoordinateOffsetX != nil {
		return *m.GridCoordinateOffsetX
	}
	return 0
}

func (m *TectonicShiftArchive) GetGridCoordinateOffsetY() uint32 {
	if m != nil && m.GridCoordinateOffsetY != nil {
		return *m.GridCoordinateOffsetY
	}
	return 0
}

func (m *TectonicShiftArchive) GetGridCoordinateOffsetXIsNegative() bool {
	if m != nil && m.GridCoordinateOffsetXIsNegative != nil {
		return *m.GridCoordinateOffsetXIsNegative
	}
	return false
}

func (m *TectonicShiftArchive) GetGridCoordinateOffsetYIsNegative() bool {
	if m != nil && m.GridCoordinateOffsetYIsNegative != nil {
		return *m.GridCoordinateOffsetYIsNegative
	}
	return false
}

func (m *TectonicShiftArchive) GetRangeForShift() *RangeCoordinateArchive {
	if m != nil {
		return m.RangeForShift
	}
	return nil
}

func (m *TectonicShiftArchive) GetRangeForDeletion() *RangeCoordinateArchive {
	if m != nil {
		return m.RangeForDeletion
	}
	return nil
}

func (m *TectonicShiftArchive) GetInsertedRange() *RangeCoordinateArchive {
	if m != nil {
		return m.InsertedRange
	}
	return nil
}

func (m *TectonicShiftArchive) GetApplyToAbsolute() bool {
	if m != nil && m.ApplyToAbsolute != nil {
		return *m.ApplyToAbsolute
	}
	return false
}

func (m *TectonicShiftArchive) GetInsertingAfter() bool {
	if m != nil && m.InsertingAfter != nil {
		return *m.InsertingAfter
	}
	return false
}

func (m *TectonicShiftArchive) GetIgnoreStickyBits() bool {
	if m != nil && m.IgnoreStickyBits != nil {
		return *m.IgnoreStickyBits
	}
	return false
}

func (m *TectonicShiftArchive) GetTableRange() *RangeCoordinateArchive {
	if m != nil {
		return m.TableRange
	}
	return nil
}

func (m *TectonicShiftArchive) GetTableId() *CFUUIDArchive {
	if m != nil {
		return m.TableId
	}
	return nil
}

type RewriteSortMappingArchive struct {
	TableId          *CFUUIDArchive             `protobuf:"bytes,1,req,name=table_id" json:"table_id,omitempty"`
	ShuffleMapping   *TSK.ShuffleMappingArchive `protobuf:"bytes,2,req,name=shuffle_mapping" json:"shuffle_mapping,omitempty"`
	ExplodeRanges    *bool                      `protobuf:"varint,3,req,name=explode_ranges" json:"explode_ranges,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *RewriteSortMappingArchive) Reset()         { *m = RewriteSortMappingArchive{} }
func (m *RewriteSortMappingArchive) String() string { return proto.CompactTextString(m) }
func (*RewriteSortMappingArchive) ProtoMessage()    {}

func (m *RewriteSortMappingArchive) GetTableId() *CFUUIDArchive {
	if m != nil {
		return m.TableId
	}
	return nil
}

func (m *RewriteSortMappingArchive) GetShuffleMapping() *TSK.ShuffleMappingArchive {
	if m != nil {
		return m.ShuffleMapping
	}
	return nil
}

func (m *RewriteSortMappingArchive) GetExplodeRanges() bool {
	if m != nil && m.ExplodeRanges != nil {
		return *m.ExplodeRanges
	}
	return false
}

type RangeMovedInfoArchive struct {
	TableId            *CFUUIDArchive          `protobuf:"bytes,1,opt,name=table_id" json:"table_id,omitempty"`
	FromRange          *RangeCoordinateArchive `protobuf:"bytes,2,opt,name=from_range" json:"from_range,omitempty"`
	ToRange            *RangeCoordinateArchive `protobuf:"bytes,3,opt,name=to_range" json:"to_range,omitempty"`
	FromRangeReference *RangeReferenceArchive  `protobuf:"bytes,4,opt,name=from_range_reference" json:"from_range_reference,omitempty"`
	ToRangeReference   *RangeReferenceArchive  `protobuf:"bytes,5,opt,name=to_range_reference" json:"to_range_reference,omitempty"`
	XXX_unrecognized   []byte                  `json:"-"`
}

func (m *RangeMovedInfoArchive) Reset()         { *m = RangeMovedInfoArchive{} }
func (m *RangeMovedInfoArchive) String() string { return proto.CompactTextString(m) }
func (*RangeMovedInfoArchive) ProtoMessage()    {}

func (m *RangeMovedInfoArchive) GetTableId() *CFUUIDArchive {
	if m != nil {
		return m.TableId
	}
	return nil
}

func (m *RangeMovedInfoArchive) GetFromRange() *RangeCoordinateArchive {
	if m != nil {
		return m.FromRange
	}
	return nil
}

func (m *RangeMovedInfoArchive) GetToRange() *RangeCoordinateArchive {
	if m != nil {
		return m.ToRange
	}
	return nil
}

func (m *RangeMovedInfoArchive) GetFromRangeReference() *RangeReferenceArchive {
	if m != nil {
		return m.FromRangeReference
	}
	return nil
}

func (m *RangeMovedInfoArchive) GetToRangeReference() *RangeReferenceArchive {
	if m != nil {
		return m.ToRangeReference
	}
	return nil
}

type TableResizedInfoArchive struct {
	TableId          *CFUUIDArchive          `protobuf:"bytes,1,req,name=table_id" json:"table_id,omitempty"`
	NewTableSize     *RangeCoordinateArchive `protobuf:"bytes,2,req,name=new_table_size" json:"new_table_size,omitempty"`
	OldTableSize     *RangeCoordinateArchive `protobuf:"bytes,3,opt,name=old_table_size" json:"old_table_size,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *TableResizedInfoArchive) Reset()         { *m = TableResizedInfoArchive{} }
func (m *TableResizedInfoArchive) String() string { return proto.CompactTextString(m) }
func (*TableResizedInfoArchive) ProtoMessage()    {}

func (m *TableResizedInfoArchive) GetTableId() *CFUUIDArchive {
	if m != nil {
		return m.TableId
	}
	return nil
}

func (m *TableResizedInfoArchive) GetNewTableSize() *RangeCoordinateArchive {
	if m != nil {
		return m.NewTableSize
	}
	return nil
}

func (m *TableResizedInfoArchive) GetOldTableSize() *RangeCoordinateArchive {
	if m != nil {
		return m.OldTableSize
	}
	return nil
}

type CellMergeInfoArchive struct {
	TableId          *CFUUIDArchive          `protobuf:"bytes,1,req,name=table_id" json:"table_id,omitempty"`
	MergedRange      *RangeCoordinateArchive `protobuf:"bytes,2,req,name=merged_range" json:"merged_range,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *CellMergeInfoArchive) Reset()         { *m = CellMergeInfoArchive{} }
func (m *CellMergeInfoArchive) String() string { return proto.CompactTextString(m) }
func (*CellMergeInfoArchive) ProtoMessage()    {}

func (m *CellMergeInfoArchive) GetTableId() *CFUUIDArchive {
	if m != nil {
		return m.TableId
	}
	return nil
}

func (m *CellMergeInfoArchive) GetMergedRange() *RangeCoordinateArchive {
	if m != nil {
		return m.MergedRange
	}
	return nil
}

type FormulaRewriteSpecArchive struct {
	RewriteType      *FormulaRewriteSpecArchive_RewriteType `protobuf:"varint,1,req,name=rewrite_type,enum=TSCE.FormulaRewriteSpecArchive_RewriteType" json:"rewrite_type,omitempty"`
	TectonicShift    *TectonicShiftArchive                  `protobuf:"bytes,2,opt,name=tectonic_shift" json:"tectonic_shift,omitempty"`
	SortMapping      *RewriteSortMappingArchive             `protobuf:"bytes,3,opt,name=sort_mapping" json:"sort_mapping,omitempty"`
	RangeMovedInfo   *RangeMovedInfoArchive                 `protobuf:"bytes,4,opt,name=range_moved_info" json:"range_moved_info,omitempty"`
	DeletedOwnerId   *CFUUIDArchive                         `protobuf:"bytes,5,opt,name=deleted_owner_id" json:"deleted_owner_id,omitempty"`
	TableResizedInfo *TableResizedInfoArchive               `protobuf:"bytes,6,opt,name=table_resized_info" json:"table_resized_info,omitempty"`
	CellMergeInfo    *CellMergeInfoArchive                  `protobuf:"bytes,7,opt,name=cell_merge_info" json:"cell_merge_info,omitempty"`
	XXX_unrecognized []byte                                 `json:"-"`
}

func (m *FormulaRewriteSpecArchive) Reset()         { *m = FormulaRewriteSpecArchive{} }
func (m *FormulaRewriteSpecArchive) String() string { return proto.CompactTextString(m) }
func (*FormulaRewriteSpecArchive) ProtoMessage()    {}

func (m *FormulaRewriteSpecArchive) GetRewriteType() FormulaRewriteSpecArchive_RewriteType {
	if m != nil && m.RewriteType != nil {
		return *m.RewriteType
	}
	return FormulaRewriteSpecArchive_TECTONIC_SHIFT
}

func (m *FormulaRewriteSpecArchive) GetTectonicShift() *TectonicShiftArchive {
	if m != nil {
		return m.TectonicShift
	}
	return nil
}

func (m *FormulaRewriteSpecArchive) GetSortMapping() *RewriteSortMappingArchive {
	if m != nil {
		return m.SortMapping
	}
	return nil
}

func (m *FormulaRewriteSpecArchive) GetRangeMovedInfo() *RangeMovedInfoArchive {
	if m != nil {
		return m.RangeMovedInfo
	}
	return nil
}

func (m *FormulaRewriteSpecArchive) GetDeletedOwnerId() *CFUUIDArchive {
	if m != nil {
		return m.DeletedOwnerId
	}
	return nil
}

func (m *FormulaRewriteSpecArchive) GetTableResizedInfo() *TableResizedInfoArchive {
	if m != nil {
		return m.TableResizedInfo
	}
	return nil
}

func (m *FormulaRewriteSpecArchive) GetCellMergeInfo() *CellMergeInfoArchive {
	if m != nil {
		return m.CellMergeInfo
	}
	return nil
}

type CellCoordinateFormulaPairArchive struct {
	Column           *uint32         `protobuf:"varint,1,req,name=column" json:"column,omitempty"`
	Row              *uint32         `protobuf:"varint,2,req,name=row" json:"row,omitempty"`
	Formula          *FormulaArchive `protobuf:"bytes,3,opt,name=formula" json:"formula,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CellCoordinateFormulaPairArchive) Reset()         { *m = CellCoordinateFormulaPairArchive{} }
func (m *CellCoordinateFormulaPairArchive) String() string { return proto.CompactTextString(m) }
func (*CellCoordinateFormulaPairArchive) ProtoMessage()    {}

func (m *CellCoordinateFormulaPairArchive) GetColumn() uint32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func (m *CellCoordinateFormulaPairArchive) GetRow() uint32 {
	if m != nil && m.Row != nil {
		return *m.Row
	}
	return 0
}

func (m *CellCoordinateFormulaPairArchive) GetFormula() *FormulaArchive {
	if m != nil {
		return m.Formula
	}
	return nil
}

type CellCoordinateArchive struct {
	PackedData       *uint32 `protobuf:"fixed32,1,opt,name=packedData" json:"packedData,omitempty"`
	Column           *uint32 `protobuf:"varint,2,opt,name=column" json:"column,omitempty"`
	Row              *uint32 `protobuf:"varint,3,opt,name=row" json:"row,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CellCoordinateArchive) Reset()         { *m = CellCoordinateArchive{} }
func (m *CellCoordinateArchive) String() string { return proto.CompactTextString(m) }
func (*CellCoordinateArchive) ProtoMessage()    {}

func (m *CellCoordinateArchive) GetPackedData() uint32 {
	if m != nil && m.PackedData != nil {
		return *m.PackedData
	}
	return 0
}

func (m *CellCoordinateArchive) GetColumn() uint32 {
	if m != nil && m.Column != nil {
		return *m.Column
	}
	return 0
}

func (m *CellCoordinateArchive) GetRow() uint32 {
	if m != nil && m.Row != nil {
		return *m.Row
	}
	return 0
}

type CellCoordinateVectorArchive struct {
	CellCoordinate   []*CellCoordinateArchive `protobuf:"bytes,1,rep,name=cell_coordinate" json:"cell_coordinate,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *CellCoordinateVectorArchive) Reset()         { *m = CellCoordinateVectorArchive{} }
func (m *CellCoordinateVectorArchive) String() string { return proto.CompactTextString(m) }
func (*CellCoordinateVectorArchive) ProtoMessage()    {}

func (m *CellCoordinateVectorArchive) GetCellCoordinate() []*CellCoordinateArchive {
	if m != nil {
		return m.CellCoordinate
	}
	return nil
}

type CellCoordinateObjectPairArchive struct {
	CellCoordinate   *CellCoordinateArchive `protobuf:"bytes,1,req,name=cell_coordinate" json:"cell_coordinate,omitempty"`
	Object           *TSP.Reference         `protobuf:"bytes,2,req,name=object" json:"object,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *CellCoordinateObjectPairArchive) Reset()         { *m = CellCoordinateObjectPairArchive{} }
func (m *CellCoordinateObjectPairArchive) String() string { return proto.CompactTextString(m) }
func (*CellCoordinateObjectPairArchive) ProtoMessage()    {}

func (m *CellCoordinateObjectPairArchive) GetCellCoordinate() *CellCoordinateArchive {
	if m != nil {
		return m.CellCoordinate
	}
	return nil
}

func (m *CellCoordinateObjectPairArchive) GetObject() *TSP.Reference {
	if m != nil {
		return m.Object
	}
	return nil
}

type CellCoordinateObjectMapArchive struct {
	CellCoordinateObjectPair []*CellCoordinateObjectPairArchive `protobuf:"bytes,1,rep,name=cell_coordinate_object_pair" json:"cell_coordinate_object_pair,omitempty"`
	XXX_unrecognized         []byte                             `json:"-"`
}

func (m *CellCoordinateObjectMapArchive) Reset()         { *m = CellCoordinateObjectMapArchive{} }
func (m *CellCoordinateObjectMapArchive) String() string { return proto.CompactTextString(m) }
func (*CellCoordinateObjectMapArchive) ProtoMessage()    {}

func (m *CellCoordinateObjectMapArchive) GetCellCoordinateObjectPair() []*CellCoordinateObjectPairArchive {
	if m != nil {
		return m.CellCoordinateObjectPair
	}
	return nil
}

type OwnerFormulaMapArchive struct {
	CoordinateFormulaPair []*CellCoordinateFormulaPairArchive `protobuf:"bytes,1,rep,name=coordinate_formula_pair" json:"coordinate_formula_pair,omitempty"`
	XXX_unrecognized      []byte                              `json:"-"`
}

func (m *OwnerFormulaMapArchive) Reset()         { *m = OwnerFormulaMapArchive{} }
func (m *OwnerFormulaMapArchive) String() string { return proto.CompactTextString(m) }
func (*OwnerFormulaMapArchive) ProtoMessage()    {}

func (m *OwnerFormulaMapArchive) GetCoordinateFormulaPair() []*CellCoordinateFormulaPairArchive {
	if m != nil {
		return m.CoordinateFormulaPair
	}
	return nil
}

type FormulaRewriteCommandArchive struct {
	TableRewriteCommand *TSP.Reference      `protobuf:"bytes,1,opt,name=table_rewrite_command" json:"table_rewrite_command,omitempty"`
	Super               *TSK.CommandArchive `protobuf:"bytes,2,opt,name=super" json:"super,omitempty"`
	XXX_unrecognized    []byte              `json:"-"`
}

func (m *FormulaRewriteCommandArchive) Reset()         { *m = FormulaRewriteCommandArchive{} }
func (m *FormulaRewriteCommandArchive) String() string { return proto.CompactTextString(m) }
func (*FormulaRewriteCommandArchive) ProtoMessage()    {}

func (m *FormulaRewriteCommandArchive) GetTableRewriteCommand() *TSP.Reference {
	if m != nil {
		return m.TableRewriteCommand
	}
	return nil
}

func (m *FormulaRewriteCommandArchive) GetSuper() *TSK.CommandArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type NumberTrackedReferencePairArchive struct {
	Number           *uint32        `protobuf:"varint,1,req,name=number" json:"number,omitempty"`
	TrackedReference *TSP.Reference `protobuf:"bytes,2,opt,name=tracked_reference" json:"tracked_reference,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *NumberTrackedReferencePairArchive) Reset()         { *m = NumberTrackedReferencePairArchive{} }
func (m *NumberTrackedReferencePairArchive) String() string { return proto.CompactTextString(m) }
func (*NumberTrackedReferencePairArchive) ProtoMessage()    {}

func (m *NumberTrackedReferencePairArchive) GetNumber() uint32 {
	if m != nil && m.Number != nil {
		return *m.Number
	}
	return 0
}

func (m *NumberTrackedReferencePairArchive) GetTrackedReference() *TSP.Reference {
	if m != nil {
		return m.TrackedReference
	}
	return nil
}

type NumberToTrackedReferenceMapArchive struct {
	NumberTrackedReferencePair []*NumberTrackedReferencePairArchive `protobuf:"bytes,1,rep,name=number_tracked_reference_pair" json:"number_tracked_reference_pair,omitempty"`
	XXX_unrecognized           []byte                               `json:"-"`
}

func (m *NumberToTrackedReferenceMapArchive) Reset()         { *m = NumberToTrackedReferenceMapArchive{} }
func (m *NumberToTrackedReferenceMapArchive) String() string { return proto.CompactTextString(m) }
func (*NumberToTrackedReferenceMapArchive) ProtoMessage()    {}

func (m *NumberToTrackedReferenceMapArchive) GetNumberTrackedReferencePair() []*NumberTrackedReferencePairArchive {
	if m != nil {
		return m.NumberTrackedReferencePair
	}
	return nil
}

type TrackedReferencesRewriteCommandArchive struct {
	ReferencesInReferenceTracker   *NumberToTrackedReferenceMapArchive `protobuf:"bytes,1,opt,name=references_in_reference_tracker" json:"references_in_reference_tracker,omitempty"`
	OriginalTrackedReferenceCopies *NumberToTrackedReferenceMapArchive `protobuf:"bytes,2,opt,name=original_tracked_reference_copies" json:"original_tracked_reference_copies,omitempty"`
	RewriteSpec                    *FormulaRewriteSpecArchive          `protobuf:"bytes,3,opt,name=rewrite_spec" json:"rewrite_spec,omitempty"`
	ReferenceTracker               *TSP.Reference                      `protobuf:"bytes,4,req,name=reference_tracker" json:"reference_tracker,omitempty"`
	Super                          *TSK.CommandArchive                 `protobuf:"bytes,5,req,name=super" json:"super,omitempty"`
	XXX_unrecognized               []byte                              `json:"-"`
}

func (m *TrackedReferencesRewriteCommandArchive) Reset() {
	*m = TrackedReferencesRewriteCommandArchive{}
}
func (m *TrackedReferencesRewriteCommandArchive) String() string { return proto.CompactTextString(m) }
func (*TrackedReferencesRewriteCommandArchive) ProtoMessage()    {}

func (m *TrackedReferencesRewriteCommandArchive) GetReferencesInReferenceTracker() *NumberToTrackedReferenceMapArchive {
	if m != nil {
		return m.ReferencesInReferenceTracker
	}
	return nil
}

func (m *TrackedReferencesRewriteCommandArchive) GetOriginalTrackedReferenceCopies() *NumberToTrackedReferenceMapArchive {
	if m != nil {
		return m.OriginalTrackedReferenceCopies
	}
	return nil
}

func (m *TrackedReferencesRewriteCommandArchive) GetRewriteSpec() *FormulaRewriteSpecArchive {
	if m != nil {
		return m.RewriteSpec
	}
	return nil
}

func (m *TrackedReferencesRewriteCommandArchive) GetReferenceTracker() *TSP.Reference {
	if m != nil {
		return m.ReferenceTracker
	}
	return nil
}

func (m *TrackedReferencesRewriteCommandArchive) GetSuper() *TSK.CommandArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type TrackedReferenceArchive struct {
	Ast              *ASTNodeArrayArchive `protobuf:"bytes,1,req,name=ast" json:"ast,omitempty"`
	FormulaId        *uint32              `protobuf:"varint,2,req,name=formula_id" json:"formula_id,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *TrackedReferenceArchive) Reset()         { *m = TrackedReferenceArchive{} }
func (m *TrackedReferenceArchive) String() string { return proto.CompactTextString(m) }
func (*TrackedReferenceArchive) ProtoMessage()    {}

func (m *TrackedReferenceArchive) GetAst() *ASTNodeArrayArchive {
	if m != nil {
		return m.Ast
	}
	return nil
}

func (m *TrackedReferenceArchive) GetFormulaId() uint32 {
	if m != nil && m.FormulaId != nil {
		return *m.FormulaId
	}
	return 0
}

type ReferenceTrackerArchive struct {
	Uuid                      *CFUUIDArchive             `protobuf:"bytes,1,req,name=uuid" json:"uuid,omitempty"`
	TrackedReference          []*TSP.Reference           `protobuf:"bytes,2,rep,name=tracked_reference" json:"tracked_reference,omitempty"`
	ContainedTrackedReference []*TrackedReferenceArchive `protobuf:"bytes,3,rep,name=contained_tracked_reference" json:"contained_tracked_reference,omitempty"`
	XXX_unrecognized          []byte                     `json:"-"`
}

func (m *ReferenceTrackerArchive) Reset()         { *m = ReferenceTrackerArchive{} }
func (m *ReferenceTrackerArchive) String() string { return proto.CompactTextString(m) }
func (*ReferenceTrackerArchive) ProtoMessage()    {}

func (m *ReferenceTrackerArchive) GetUuid() *CFUUIDArchive {
	if m != nil {
		return m.Uuid
	}
	return nil
}

func (m *ReferenceTrackerArchive) GetTrackedReference() []*TSP.Reference {
	if m != nil {
		return m.TrackedReference
	}
	return nil
}

func (m *ReferenceTrackerArchive) GetContainedTrackedReference() []*TrackedReferenceArchive {
	if m != nil {
		return m.ContainedTrackedReference
	}
	return nil
}

type BooleanCellValueArchive struct {
	Value            *bool  `protobuf:"varint,1,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *BooleanCellValueArchive) Reset()         { *m = BooleanCellValueArchive{} }
func (m *BooleanCellValueArchive) String() string { return proto.CompactTextString(m) }
func (*BooleanCellValueArchive) ProtoMessage()    {}

func (m *BooleanCellValueArchive) GetValue() bool {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return false
}

type DateCellValueArchive struct {
	Value            *float64                 `protobuf:"fixed64,1,req,name=value" json:"value,omitempty"`
	Format           *TSK.FormatStructArchive `protobuf:"bytes,2,req,name=format" json:"format,omitempty"`
	FormatIsImplicit *bool                    `protobuf:"varint,3,opt,name=format_is_implicit,def=1" json:"format_is_implicit,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *DateCellValueArchive) Reset()         { *m = DateCellValueArchive{} }
func (m *DateCellValueArchive) String() string { return proto.CompactTextString(m) }
func (*DateCellValueArchive) ProtoMessage()    {}

const Default_DateCellValueArchive_FormatIsImplicit bool = true

func (m *DateCellValueArchive) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *DateCellValueArchive) GetFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *DateCellValueArchive) GetFormatIsImplicit() bool {
	if m != nil && m.FormatIsImplicit != nil {
		return *m.FormatIsImplicit
	}
	return Default_DateCellValueArchive_FormatIsImplicit
}

type NumberCellValueArchive struct {
	Value            *float64                 `protobuf:"fixed64,1,req,name=value" json:"value,omitempty"`
	Unit             *int32                   `protobuf:"varint,2,req,name=unit" json:"unit,omitempty"`
	Format           *TSK.FormatStructArchive `protobuf:"bytes,3,req,name=format" json:"format,omitempty"`
	FormatIsImplicit *bool                    `protobuf:"varint,4,opt,name=format_is_implicit,def=1" json:"format_is_implicit,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *NumberCellValueArchive) Reset()         { *m = NumberCellValueArchive{} }
func (m *NumberCellValueArchive) String() string { return proto.CompactTextString(m) }
func (*NumberCellValueArchive) ProtoMessage()    {}

const Default_NumberCellValueArchive_FormatIsImplicit bool = true

func (m *NumberCellValueArchive) GetValue() float64 {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return 0
}

func (m *NumberCellValueArchive) GetUnit() int32 {
	if m != nil && m.Unit != nil {
		return *m.Unit
	}
	return 0
}

func (m *NumberCellValueArchive) GetFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *NumberCellValueArchive) GetFormatIsImplicit() bool {
	if m != nil && m.FormatIsImplicit != nil {
		return *m.FormatIsImplicit
	}
	return Default_NumberCellValueArchive_FormatIsImplicit
}

type StringCellValueArchive struct {
	Value            *string                  `protobuf:"bytes,1,req,name=value" json:"value,omitempty"`
	Format           *TSK.FormatStructArchive `protobuf:"bytes,2,req,name=format" json:"format,omitempty"`
	FormatIsImplicit *bool                    `protobuf:"varint,3,opt,name=format_is_implicit,def=1" json:"format_is_implicit,omitempty"`
	XXX_unrecognized []byte                   `json:"-"`
}

func (m *StringCellValueArchive) Reset()         { *m = StringCellValueArchive{} }
func (m *StringCellValueArchive) String() string { return proto.CompactTextString(m) }
func (*StringCellValueArchive) ProtoMessage()    {}

const Default_StringCellValueArchive_FormatIsImplicit bool = true

func (m *StringCellValueArchive) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *StringCellValueArchive) GetFormat() *TSK.FormatStructArchive {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *StringCellValueArchive) GetFormatIsImplicit() bool {
	if m != nil && m.FormatIsImplicit != nil {
		return *m.FormatIsImplicit
	}
	return Default_StringCellValueArchive_FormatIsImplicit
}

type CellValueArchive struct {
	CellValueType    *CellValueArchive_CellValueType `protobuf:"varint,1,req,name=cell_value_type,enum=TSCE.CellValueArchive_CellValueType" json:"cell_value_type,omitempty"`
	BooleanValue     *BooleanCellValueArchive        `protobuf:"bytes,2,opt,name=boolean_value" json:"boolean_value,omitempty"`
	DateValue        *DateCellValueArchive           `protobuf:"bytes,3,opt,name=date_value" json:"date_value,omitempty"`
	NumberValue      *NumberCellValueArchive         `protobuf:"bytes,4,opt,name=number_value" json:"number_value,omitempty"`
	StringValue      *StringCellValueArchive         `protobuf:"bytes,5,opt,name=string_value" json:"string_value,omitempty"`
	XXX_unrecognized []byte                          `json:"-"`
}

func (m *CellValueArchive) Reset()         { *m = CellValueArchive{} }
func (m *CellValueArchive) String() string { return proto.CompactTextString(m) }
func (*CellValueArchive) ProtoMessage()    {}

func (m *CellValueArchive) GetCellValueType() CellValueArchive_CellValueType {
	if m != nil && m.CellValueType != nil {
		return *m.CellValueType
	}
	return CellValueArchive_NIL_TYPE
}

func (m *CellValueArchive) GetBooleanValue() *BooleanCellValueArchive {
	if m != nil {
		return m.BooleanValue
	}
	return nil
}

func (m *CellValueArchive) GetDateValue() *DateCellValueArchive {
	if m != nil {
		return m.DateValue
	}
	return nil
}

func (m *CellValueArchive) GetNumberValue() *NumberCellValueArchive {
	if m != nil {
		return m.NumberValue
	}
	return nil
}

func (m *CellValueArchive) GetStringValue() *StringCellValueArchive {
	if m != nil {
		return m.StringValue
	}
	return nil
}

func init() {
	proto.RegisterEnum("TSCE.ReferenceArchive_ReferenceType", ReferenceArchive_ReferenceType_name, ReferenceArchive_ReferenceType_value)
	proto.RegisterEnum("TSCE.SpanningDependenciesArchive_RangeContext", SpanningDependenciesArchive_RangeContext_name, SpanningDependenciesArchive_RangeContext_value)
	proto.RegisterEnum("TSCE.CalculationEngineArchive_ExcelImportDateMode", CalculationEngineArchive_ExcelImportDateMode_name, CalculationEngineArchive_ExcelImportDateMode_value)
	proto.RegisterEnum("TSCE.ASTNodeArrayArchive_ASTNodeType", ASTNodeArrayArchive_ASTNodeType_name, ASTNodeArrayArchive_ASTNodeType_value)
	proto.RegisterEnum("TSCE.FormulaRewriteSpecArchive_RewriteType", FormulaRewriteSpecArchive_RewriteType_name, FormulaRewriteSpecArchive_RewriteType_value)
	proto.RegisterEnum("TSCE.CellValueArchive_CellValueType", CellValueArchive_CellValueType_name, CellValueArchive_CellValueType_value)
}
