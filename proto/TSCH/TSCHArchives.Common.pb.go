// Code generated by protoc-gen-go.
// source: TSCHArchives.Common.proto
// DO NOT EDIT!

/*
Package TSCH is a generated protocol buffer package.

It is generated from these files:
	TSCHArchives.Common.proto

It has these top-level messages:
	SparseReferenceArrayArchive
	RectArchive
	ChartsNSNumberDoubleArchive
	ChartsNSArrayOfNSNumberDoubleArchive
	DEPRECATEDChart3DFillArchive
	ChartStyleArchive
	ChartNonStyleArchive
	LegendStyleArchive
	LegendNonStyleArchive
	ChartAxisStyleArchive
	ChartAxisNonStyleArchive
	ChartSeriesStyleArchive
	ChartSeriesNonStyleArchive
*/
package TSCH

import proto "github.com/golang/protobuf/proto"
import math "math"
import "github.com/orcastor/iwork-converter//proto/TSP"

// discarding unused import TSK "TSKArchives.pb"
import "github.com/orcastor/iwork-converter//proto/TSD"
import "github.com/orcastor/iwork-converter//proto/TSS"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type ChartType int32

const (
	ChartType_undefinedChartType          ChartType = 0
	ChartType_columnChartType2D           ChartType = 1
	ChartType_barChartType2D              ChartType = 2
	ChartType_lineChartType2D             ChartType = 3
	ChartType_areaChartType2D             ChartType = 4
	ChartType_pieChartType2D              ChartType = 5
	ChartType_stackedColumnChartType2D    ChartType = 6
	ChartType_stackedBarChartType2D       ChartType = 7
	ChartType_stackedAreaChartType2D      ChartType = 8
	ChartType_scatterChartType2D          ChartType = 9
	ChartType_mixedChartType2D            ChartType = 10
	ChartType_twoAxisChartType2D          ChartType = 11
	ChartType_columnChartType3D           ChartType = 12
	ChartType_barChartType3D              ChartType = 13
	ChartType_lineChartType3D             ChartType = 14
	ChartType_areaChartType3D             ChartType = 15
	ChartType_pieChartType3D              ChartType = 16
	ChartType_stackedColumnChartType3D    ChartType = 17
	ChartType_stackedBarChartType3D       ChartType = 18
	ChartType_stackedAreaChartType3D      ChartType = 19
	ChartType_multiDataColumnChartType2D  ChartType = 20
	ChartType_multiDataBarChartType2D     ChartType = 21
	ChartType_bubbleChartType2D           ChartType = 22
	ChartType_multiDataScatterChartType2D ChartType = 23
	ChartType_multiDataBubbleChartType2D  ChartType = 24
)

var ChartType_name = map[int32]string{
	0:  "undefinedChartType",
	1:  "columnChartType2D",
	2:  "barChartType2D",
	3:  "lineChartType2D",
	4:  "areaChartType2D",
	5:  "pieChartType2D",
	6:  "stackedColumnChartType2D",
	7:  "stackedBarChartType2D",
	8:  "stackedAreaChartType2D",
	9:  "scatterChartType2D",
	10: "mixedChartType2D",
	11: "twoAxisChartType2D",
	12: "columnChartType3D",
	13: "barChartType3D",
	14: "lineChartType3D",
	15: "areaChartType3D",
	16: "pieChartType3D",
	17: "stackedColumnChartType3D",
	18: "stackedBarChartType3D",
	19: "stackedAreaChartType3D",
	20: "multiDataColumnChartType2D",
	21: "multiDataBarChartType2D",
	22: "bubbleChartType2D",
	23: "multiDataScatterChartType2D",
	24: "multiDataBubbleChartType2D",
}
var ChartType_value = map[string]int32{
	"undefinedChartType":          0,
	"columnChartType2D":           1,
	"barChartType2D":              2,
	"lineChartType2D":             3,
	"areaChartType2D":             4,
	"pieChartType2D":              5,
	"stackedColumnChartType2D":    6,
	"stackedBarChartType2D":       7,
	"stackedAreaChartType2D":      8,
	"scatterChartType2D":          9,
	"mixedChartType2D":            10,
	"twoAxisChartType2D":          11,
	"columnChartType3D":           12,
	"barChartType3D":              13,
	"lineChartType3D":             14,
	"areaChartType3D":             15,
	"pieChartType3D":              16,
	"stackedColumnChartType3D":    17,
	"stackedBarChartType3D":       18,
	"stackedAreaChartType3D":      19,
	"multiDataColumnChartType2D":  20,
	"multiDataBarChartType2D":     21,
	"bubbleChartType2D":           22,
	"multiDataScatterChartType2D": 23,
	"multiDataBubbleChartType2D":  24,
}

func (x ChartType) Enum() *ChartType {
	p := new(ChartType)
	*p = x
	return p
}
func (x ChartType) String() string {
	return proto.EnumName(ChartType_name, int32(x))
}
func (x *ChartType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ChartType_value, data, "ChartType")
	if err != nil {
		return err
	}
	*x = ChartType(value)
	return nil
}

type AxisType int32

const (
	AxisType_axis_type_unknown AxisType = 0
	AxisType_axis_type_x       AxisType = 1
	AxisType_axis_type_y       AxisType = 2
	AxisType_axis_type_pie     AxisType = 3
	AxisType_axis_type_size    AxisType = 4
)

var AxisType_name = map[int32]string{
	0: "axis_type_unknown",
	1: "axis_type_x",
	2: "axis_type_y",
	3: "axis_type_pie",
	4: "axis_type_size",
}
var AxisType_value = map[string]int32{
	"axis_type_unknown": 0,
	"axis_type_x":       1,
	"axis_type_y":       2,
	"axis_type_pie":     3,
	"axis_type_size":    4,
}

func (x AxisType) Enum() *AxisType {
	p := new(AxisType)
	*p = x
	return p
}
func (x AxisType) String() string {
	return proto.EnumName(AxisType_name, int32(x))
}
func (x *AxisType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AxisType_value, data, "AxisType")
	if err != nil {
		return err
	}
	*x = AxisType(value)
	return nil
}

type ScatterFormat int32

const (
	ScatterFormat_scatter_format_unknown    ScatterFormat = 0
	ScatterFormat_scatter_format_separate_x ScatterFormat = 1
	ScatterFormat_scatter_format_shared_x   ScatterFormat = 2
)

var ScatterFormat_name = map[int32]string{
	0: "scatter_format_unknown",
	1: "scatter_format_separate_x",
	2: "scatter_format_shared_x",
}
var ScatterFormat_value = map[string]int32{
	"scatter_format_unknown":    0,
	"scatter_format_separate_x": 1,
	"scatter_format_shared_x":   2,
}

func (x ScatterFormat) Enum() *ScatterFormat {
	p := new(ScatterFormat)
	*p = x
	return p
}
func (x ScatterFormat) String() string {
	return proto.EnumName(ScatterFormat_name, int32(x))
}
func (x *ScatterFormat) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ScatterFormat_value, data, "ScatterFormat")
	if err != nil {
		return err
	}
	*x = ScatterFormat(value)
	return nil
}

type SeriesDirection int32

const (
	SeriesDirection_series_direction_unknown   SeriesDirection = 0
	SeriesDirection_series_direction_by_row    SeriesDirection = 1
	SeriesDirection_series_direction_by_column SeriesDirection = 2
)

var SeriesDirection_name = map[int32]string{
	0: "series_direction_unknown",
	1: "series_direction_by_row",
	2: "series_direction_by_column",
}
var SeriesDirection_value = map[string]int32{
	"series_direction_unknown":   0,
	"series_direction_by_row":    1,
	"series_direction_by_column": 2,
}

func (x SeriesDirection) Enum() *SeriesDirection {
	p := new(SeriesDirection)
	*p = x
	return p
}
func (x SeriesDirection) String() string {
	return proto.EnumName(SeriesDirection_name, int32(x))
}
func (x *SeriesDirection) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SeriesDirection_value, data, "SeriesDirection")
	if err != nil {
		return err
	}
	*x = SeriesDirection(value)
	return nil
}

type NumberValueType int32

const (
	NumberValueType_numberValueTypeDecimal    NumberValueType = 0
	NumberValueType_numberValueTypeCurrency   NumberValueType = 1
	NumberValueType_numberValueTypePercentage NumberValueType = 2
	NumberValueType_numberValueTypeScientific NumberValueType = 3
	NumberValueType_numberValueTypeFraction   NumberValueType = 4
	NumberValueType_numberValueTypeBase       NumberValueType = 5
	NumberValueType_numberValueTypeUnknown    NumberValueType = -999
)

var NumberValueType_name = map[int32]string{
	0:    "numberValueTypeDecimal",
	1:    "numberValueTypeCurrency",
	2:    "numberValueTypePercentage",
	3:    "numberValueTypeScientific",
	4:    "numberValueTypeFraction",
	5:    "numberValueTypeBase",
	-999: "numberValueTypeUnknown",
}
var NumberValueType_value = map[string]int32{
	"numberValueTypeDecimal":    0,
	"numberValueTypeCurrency":   1,
	"numberValueTypePercentage": 2,
	"numberValueTypeScientific": 3,
	"numberValueTypeFraction":   4,
	"numberValueTypeBase":       5,
	"numberValueTypeUnknown":    -999,
}

func (x NumberValueType) Enum() *NumberValueType {
	p := new(NumberValueType)
	*p = x
	return p
}
func (x NumberValueType) String() string {
	return proto.EnumName(NumberValueType_name, int32(x))
}
func (x *NumberValueType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NumberValueType_value, data, "NumberValueType")
	if err != nil {
		return err
	}
	*x = NumberValueType(value)
	return nil
}

type NegativeNumberStyle int32

const (
	NegativeNumberStyle_negativeNumberStyleMinus             NegativeNumberStyle = 0
	NegativeNumberStyle_negativeNumberStyleRed               NegativeNumberStyle = 1
	NegativeNumberStyle_negativeNumberStyleParentheses       NegativeNumberStyle = 2
	NegativeNumberStyle_negativeNumberStyleRedAndParentheses NegativeNumberStyle = 3
	NegativeNumberStyle_negativeNumberStyleNone              NegativeNumberStyle = 4
)

var NegativeNumberStyle_name = map[int32]string{
	0: "negativeNumberStyleMinus",
	1: "negativeNumberStyleRed",
	2: "negativeNumberStyleParentheses",
	3: "negativeNumberStyleRedAndParentheses",
	4: "negativeNumberStyleNone",
}
var NegativeNumberStyle_value = map[string]int32{
	"negativeNumberStyleMinus":             0,
	"negativeNumberStyleRed":               1,
	"negativeNumberStyleParentheses":       2,
	"negativeNumberStyleRedAndParentheses": 3,
	"negativeNumberStyleNone":              4,
}

func (x NegativeNumberStyle) Enum() *NegativeNumberStyle {
	p := new(NegativeNumberStyle)
	*p = x
	return p
}
func (x NegativeNumberStyle) String() string {
	return proto.EnumName(NegativeNumberStyle_name, int32(x))
}
func (x *NegativeNumberStyle) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(NegativeNumberStyle_value, data, "NegativeNumberStyle")
	if err != nil {
		return err
	}
	*x = NegativeNumberStyle(value)
	return nil
}

type FractionAccuracy int32

const (
	FractionAccuracy_fractionAccuracyConflicting     FractionAccuracy = 0
	FractionAccuracy_fractionAccuracyUpToOneDigit    FractionAccuracy = -1
	FractionAccuracy_fractionAccuracyUpToTwoDigits   FractionAccuracy = -2
	FractionAccuracy_fractionAccuracyUpToThreeDigits FractionAccuracy = -3
	FractionAccuracy_fractionAccuracyHalves          FractionAccuracy = 2
	FractionAccuracy_fractionAccuracyQuarters        FractionAccuracy = 4
	FractionAccuracy_fractionAccuracyEighths         FractionAccuracy = 8
	FractionAccuracy_fractionAccuracySixteenths      FractionAccuracy = 16
	FractionAccuracy_fractionAccuracyTenths          FractionAccuracy = 10
	FractionAccuracy_fractionAccuracyHundredths      FractionAccuracy = 100
)

var FractionAccuracy_name = map[int32]string{
	0:   "fractionAccuracyConflicting",
	-1:  "fractionAccuracyUpToOneDigit",
	-2:  "fractionAccuracyUpToTwoDigits",
	-3:  "fractionAccuracyUpToThreeDigits",
	2:   "fractionAccuracyHalves",
	4:   "fractionAccuracyQuarters",
	8:   "fractionAccuracyEighths",
	16:  "fractionAccuracySixteenths",
	10:  "fractionAccuracyTenths",
	100: "fractionAccuracyHundredths",
}
var FractionAccuracy_value = map[string]int32{
	"fractionAccuracyConflicting":     0,
	"fractionAccuracyUpToOneDigit":    -1,
	"fractionAccuracyUpToTwoDigits":   -2,
	"fractionAccuracyUpToThreeDigits": -3,
	"fractionAccuracyHalves":          2,
	"fractionAccuracyQuarters":        4,
	"fractionAccuracyEighths":         8,
	"fractionAccuracySixteenths":      16,
	"fractionAccuracyTenths":          10,
	"fractionAccuracyHundredths":      100,
}

func (x FractionAccuracy) Enum() *FractionAccuracy {
	p := new(FractionAccuracy)
	*p = x
	return p
}
func (x FractionAccuracy) String() string {
	return proto.EnumName(FractionAccuracy_name, int32(x))
}
func (x *FractionAccuracy) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(FractionAccuracy_value, data, "FractionAccuracy")
	if err != nil {
		return err
	}
	*x = FractionAccuracy(value)
	return nil
}

type SparseReferenceArrayArchive struct {
	NumEntries       *uint32                              `protobuf:"varint,1,req,name=num_entries" json:"num_entries,omitempty"`
	Entries          []*SparseReferenceArrayArchive_Entry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
	XXX_unrecognized []byte                               `json:"-"`
}

func (m *SparseReferenceArrayArchive) Reset()         { *m = SparseReferenceArrayArchive{} }
func (m *SparseReferenceArrayArchive) String() string { return proto.CompactTextString(m) }
func (*SparseReferenceArrayArchive) ProtoMessage()    {}

func (m *SparseReferenceArrayArchive) GetNumEntries() uint32 {
	if m != nil && m.NumEntries != nil {
		return *m.NumEntries
	}
	return 0
}

func (m *SparseReferenceArrayArchive) GetEntries() []*SparseReferenceArrayArchive_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type SparseReferenceArrayArchive_Entry struct {
	Index            *uint32        `protobuf:"varint,1,req,name=index" json:"index,omitempty"`
	Value            *TSP.Reference `protobuf:"bytes,2,req,name=value" json:"value,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *SparseReferenceArrayArchive_Entry) Reset()         { *m = SparseReferenceArrayArchive_Entry{} }
func (m *SparseReferenceArrayArchive_Entry) String() string { return proto.CompactTextString(m) }
func (*SparseReferenceArrayArchive_Entry) ProtoMessage()    {}

func (m *SparseReferenceArrayArchive_Entry) GetIndex() uint32 {
	if m != nil && m.Index != nil {
		return *m.Index
	}
	return 0
}

func (m *SparseReferenceArrayArchive_Entry) GetValue() *TSP.Reference {
	if m != nil {
		return m.Value
	}
	return nil
}

type RectArchive struct {
	Origin           *TSP.Point `protobuf:"bytes,1,req,name=origin" json:"origin,omitempty"`
	Size             *TSP.Size  `protobuf:"bytes,2,req,name=size" json:"size,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *RectArchive) Reset()         { *m = RectArchive{} }
func (m *RectArchive) String() string { return proto.CompactTextString(m) }
func (*RectArchive) ProtoMessage()    {}

func (m *RectArchive) GetOrigin() *TSP.Point {
	if m != nil {
		return m.Origin
	}
	return nil
}

func (m *RectArchive) GetSize() *TSP.Size {
	if m != nil {
		return m.Size
	}
	return nil
}

type ChartsNSNumberDoubleArchive struct {
	NumberArchive    *float64 `protobuf:"fixed64,1,opt,name=number_archive" json:"number_archive,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ChartsNSNumberDoubleArchive) Reset()         { *m = ChartsNSNumberDoubleArchive{} }
func (m *ChartsNSNumberDoubleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartsNSNumberDoubleArchive) ProtoMessage()    {}

func (m *ChartsNSNumberDoubleArchive) GetNumberArchive() float64 {
	if m != nil && m.NumberArchive != nil {
		return *m.NumberArchive
	}
	return 0
}

type ChartsNSArrayOfNSNumberDoubleArchive struct {
	Numbers          []float64 `protobuf:"fixed64,1,rep,name=numbers" json:"numbers,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *ChartsNSArrayOfNSNumberDoubleArchive) Reset()         { *m = ChartsNSArrayOfNSNumberDoubleArchive{} }
func (m *ChartsNSArrayOfNSNumberDoubleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartsNSArrayOfNSNumberDoubleArchive) ProtoMessage()    {}

func (m *ChartsNSArrayOfNSNumberDoubleArchive) GetNumbers() []float64 {
	if m != nil {
		return m.Numbers
	}
	return nil
}

type DEPRECATEDChart3DFillArchive struct {
	Fill             *TSD.FillArchive             `protobuf:"bytes,1,opt,name=fill" json:"fill,omitempty"`
	Lightingmodel    *Chart3DLightingModelArchive `protobuf:"bytes,2,opt,name=lightingmodel" json:"lightingmodel,omitempty"`
	TexturesetId     *string                      `protobuf:"bytes,3,opt,name=textureset_id" json:"textureset_id,omitempty"`
	FillType         *FillPropertyType            `protobuf:"varint,4,opt,name=fill_type,enum=FillPropertyType" json:"fill_type,omitempty"`
	SeriesIndex      *uint32                      `protobuf:"varint,5,opt,name=series_index" json:"series_index,omitempty"`
	XXX_unrecognized []byte                       `json:"-"`
}

func (m *DEPRECATEDChart3DFillArchive) Reset()         { *m = DEPRECATEDChart3DFillArchive{} }
func (m *DEPRECATEDChart3DFillArchive) String() string { return proto.CompactTextString(m) }
func (*DEPRECATEDChart3DFillArchive) ProtoMessage()    {}

func (m *DEPRECATEDChart3DFillArchive) GetFill() *TSD.FillArchive {
	if m != nil {
		return m.Fill
	}
	return nil
}

func (m *DEPRECATEDChart3DFillArchive) GetLightingmodel() *Chart3DLightingModelArchive {
	if m != nil {
		return m.Lightingmodel
	}
	return nil
}

func (m *DEPRECATEDChart3DFillArchive) GetTexturesetId() string {
	if m != nil && m.TexturesetId != nil {
		return *m.TexturesetId
	}
	return ""
}

func (m *DEPRECATEDChart3DFillArchive) GetFillType() FillPropertyType {
	if m != nil && m.FillType != nil {
		return *m.FillType
	}
	return FillPropertyType_fillPropertyTypeUndefined
}

func (m *DEPRECATEDChart3DFillArchive) GetSeriesIndex() uint32 {
	if m != nil && m.SeriesIndex != nil {
		return *m.SeriesIndex
	}
	return 0
}

type ChartStyleArchive struct {
	Super            *TSS.StyleArchive         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ChartStyleArchive) Reset()         { *m = ChartStyleArchive{} }
func (m *ChartStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartStyleArchive) ProtoMessage()    {}

var extRange_ChartStyleArchive = []proto.ExtensionRange{
	{10000, 536870911},
}

func (*ChartStyleArchive) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ChartStyleArchive
}
func (m *ChartStyleArchive) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *ChartStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type ChartNonStyleArchive struct {
	Super            *TSS.StyleArchive         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ChartNonStyleArchive) Reset()         { *m = ChartNonStyleArchive{} }
func (m *ChartNonStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartNonStyleArchive) ProtoMessage()    {}

var extRange_ChartNonStyleArchive = []proto.ExtensionRange{
	{10000, 536870911},
}

func (*ChartNonStyleArchive) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ChartNonStyleArchive
}
func (m *ChartNonStyleArchive) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *ChartNonStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type LegendStyleArchive struct {
	Super            *TSS.StyleArchive         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *LegendStyleArchive) Reset()         { *m = LegendStyleArchive{} }
func (m *LegendStyleArchive) String() string { return proto.CompactTextString(m) }
func (*LegendStyleArchive) ProtoMessage()    {}

var extRange_LegendStyleArchive = []proto.ExtensionRange{
	{10000, 536870911},
}

func (*LegendStyleArchive) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_LegendStyleArchive
}
func (m *LegendStyleArchive) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *LegendStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type LegendNonStyleArchive struct {
	Super            *TSS.StyleArchive         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *LegendNonStyleArchive) Reset()         { *m = LegendNonStyleArchive{} }
func (m *LegendNonStyleArchive) String() string { return proto.CompactTextString(m) }
func (*LegendNonStyleArchive) ProtoMessage()    {}

var extRange_LegendNonStyleArchive = []proto.ExtensionRange{
	{10000, 536870911},
}

func (*LegendNonStyleArchive) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_LegendNonStyleArchive
}
func (m *LegendNonStyleArchive) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *LegendNonStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type ChartAxisStyleArchive struct {
	Super            *TSS.StyleArchive         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ChartAxisStyleArchive) Reset()         { *m = ChartAxisStyleArchive{} }
func (m *ChartAxisStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartAxisStyleArchive) ProtoMessage()    {}

var extRange_ChartAxisStyleArchive = []proto.ExtensionRange{
	{10000, 536870911},
}

func (*ChartAxisStyleArchive) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ChartAxisStyleArchive
}
func (m *ChartAxisStyleArchive) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *ChartAxisStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type ChartAxisNonStyleArchive struct {
	Super            *TSS.StyleArchive         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ChartAxisNonStyleArchive) Reset()         { *m = ChartAxisNonStyleArchive{} }
func (m *ChartAxisNonStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartAxisNonStyleArchive) ProtoMessage()    {}

var extRange_ChartAxisNonStyleArchive = []proto.ExtensionRange{
	{10000, 536870911},
}

func (*ChartAxisNonStyleArchive) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ChartAxisNonStyleArchive
}
func (m *ChartAxisNonStyleArchive) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *ChartAxisNonStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type ChartSeriesStyleArchive struct {
	Super            *TSS.StyleArchive         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ChartSeriesStyleArchive) Reset()         { *m = ChartSeriesStyleArchive{} }
func (m *ChartSeriesStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartSeriesStyleArchive) ProtoMessage()    {}

var extRange_ChartSeriesStyleArchive = []proto.ExtensionRange{
	{10000, 536870911},
}

func (*ChartSeriesStyleArchive) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ChartSeriesStyleArchive
}
func (m *ChartSeriesStyleArchive) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *ChartSeriesStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

type ChartSeriesNonStyleArchive struct {
	Super            *TSS.StyleArchive         `protobuf:"bytes,1,opt,name=super" json:"super,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *ChartSeriesNonStyleArchive) Reset()         { *m = ChartSeriesNonStyleArchive{} }
func (m *ChartSeriesNonStyleArchive) String() string { return proto.CompactTextString(m) }
func (*ChartSeriesNonStyleArchive) ProtoMessage()    {}

var extRange_ChartSeriesNonStyleArchive = []proto.ExtensionRange{
	{10000, 536870911},
}

func (*ChartSeriesNonStyleArchive) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_ChartSeriesNonStyleArchive
}
func (m *ChartSeriesNonStyleArchive) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *ChartSeriesNonStyleArchive) GetSuper() *TSS.StyleArchive {
	if m != nil {
		return m.Super
	}
	return nil
}

func init() {
	proto.RegisterEnum("ChartType", ChartType_name, ChartType_value)
	proto.RegisterEnum("AxisType", AxisType_name, AxisType_value)
	proto.RegisterEnum("ScatterFormat", ScatterFormat_name, ScatterFormat_value)
	proto.RegisterEnum("SeriesDirection", SeriesDirection_name, SeriesDirection_value)
	proto.RegisterEnum("NumberValueType", NumberValueType_name, NumberValueType_value)
	proto.RegisterEnum("NegativeNumberStyle", NegativeNumberStyle_name, NegativeNumberStyle_value)
	proto.RegisterEnum("FractionAccuracy", FractionAccuracy_name, FractionAccuracy_value)
}
